22 serialization::archive 17 0 0 0 0 39 /usr/home/jlhawkwell/Projects/klaculate 39 /usr/home/jlhawkwell/Projects/klaculate 0 0 1118 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 13 "klaculate.h" 1 10 1 23 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 8 "klac.h" 2 10 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 8 "ktok.h" 3 10 3 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 20 "util/InputHelper.h" 5 10 5 30 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 21 "util/OutputHelper.h" 6 10 6 31 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 5 regex 8 11 8 16 18446744073709551615 1 > 8 16 8 17 18446744073709551615 1 # 9 1 9 2 18446744073709551615 7 include 9 2 9 9 18446744073709551615 1 < 9 10 9 11 18446744073709551615 6 vector 9 11 9 17 18446744073709551615 1 > 9 17 9 18 18446744073709551615 1 # 10 1 10 2 18446744073709551615 7 include 10 2 10 9 18446744073709551615 1 < 10 10 10 11 18446744073709551615 5 cmath 10 11 10 16 18446744073709551615 1 > 10 16 10 17 18446744073709551615 1 # 11 1 11 2 18446744073709551615 7 include 11 2 11 9 18446744073709551615 1 < 11 10 11 11 18446744073709551615 7 sstream 11 11 11 18 18446744073709551615 1 > 11 18 11 19 18446744073709551615 4 void 13 1 13 5 18446744073709551615 6 solver 13 6 13 12 0 1 ( 13 12 13 13 0 3 std 13 13 13 16 1 2 :: 13 16 13 18 18446744073709551615 6 vector 13 18 13 24 2 1 < 13 24 13 25 18446744073709551615 5 token 13 25 13 30 3 1 > 13 30 13 31 18446744073709551615 5 input 13 32 13 37 4 1 ) 13 37 13 38 0 1 ; 13 38 13 39 18446744073709551615 4 void 15 1 15 5 18446744073709551615 7 runtask 15 6 15 13 5 1 ( 15 13 15 14 5 12 FCGX_Request 15 14 15 26 6 1 * 15 27 15 28 18446744073709551615 2 rq 15 28 15 30 7 1 ) 15 30 15 31 5 1 { 15 32 15 33 18446744073709551615 4 util 16 2 16 6 8 2 :: 16 6 16 8 18446744073709551615 11 InputHelper 16 8 16 19 9 2 ih 16 20 16 22 10 1 ( 16 22 16 23 9 2 rq 16 23 16 25 7 2 -> 16 25 16 27 18446744073709551615 2 in 16 27 16 29 11 1 , 16 29 16 30 9 2 rq 16 31 16 33 7 2 -> 16 33 16 35 18446744073709551615 4 envp 16 35 16 39 12 1 ) 16 39 16 40 9 1 ; 16 40 16 41 18446744073709551615 4 util 17 2 17 6 8 2 :: 17 6 17 8 18446744073709551615 12 OutputHelper 17 8 17 20 13 2 oh 17 21 17 23 14 1 ; 17 23 17 24 18446744073709551615 2 oh 19 2 19 4 14 1 . 19 4 19 5 15 8 addValue 19 5 19 13 15 1 ( 19 13 19 14 15 1 ( 19 14 19 15 18446744073709551615 4 char 19 15 19 19 18446744073709551615 1 * 19 20 19 21 18446744073709551615 1 ) 19 21 19 22 18446744073709551615 8 "scheme" 19 23 19 31 18446744073709551615 1 , 19 31 19 32 15 2 ih 19 33 19 35 10 1 . 19 35 19 36 16 9 getHeader 19 36 19 45 16 1 ( 19 45 19 46 16 16 "REQUEST_SCHEME" 19 46 19 62 18446744073709551615 1 ) 19 62 19 63 16 1 ) 19 63 19 64 15 1 ; 19 64 19 65 18446744073709551615 2 oh 20 2 20 4 14 1 . 20 4 20 5 15 8 addValue 20 5 20 13 15 1 ( 20 13 20 14 15 6 "host" 20 14 20 20 18446744073709551615 1 , 20 20 20 21 15 2 ih 20 22 20 24 10 1 . 20 24 20 25 16 9 getHeader 20 25 20 34 16 1 ( 20 34 20 35 16 11 "HTTP_HOST" 20 35 20 46 18446744073709551615 1 ) 20 46 20 47 16 1 ) 20 47 20 48 15 1 ; 20 48 20 49 18446744073709551615 3 std 22 2 22 5 1 2 :: 22 5 22 7 18446744073709551615 6 string 22 7 22 13 17 2 pt 22 14 22 16 18 1 ; 22 16 22 17 18446744073709551615 2 if 23 2 23 4 18446744073709551615 1 ( 23 5 23 6 18446744073709551615 2 ih 23 6 23 8 10 1 . 23 8 23 9 19 11 existGetter 23 9 23 20 19 1 ( 23 20 23 21 19 3 "e" 23 21 23 24 18446744073709551615 1 ) 23 24 23 25 19 2 || 23 26 23 28 18446744073709551615 2 ih 23 29 23 31 10 1 . 23 31 23 32 20 11 existFormer 23 32 23 43 20 1 ( 23 43 23 44 20 3 "e" 23 44 23 47 18446744073709551615 1 ) 23 47 23 48 20 1 ) 23 48 23 49 18446744073709551615 1 { 23 50 23 51 18446744073709551615 2 if 24 3 24 5 18446744073709551615 1 ( 24 6 24 7 18446744073709551615 2 ih 24 7 24 9 10 1 . 24 9 24 10 20 11 existFormer 24 10 24 21 20 1 ( 24 21 24 22 20 3 "e" 24 22 24 25 18446744073709551615 1 ) 24 25 24 26 20 1 ) 24 26 24 27 18446744073709551615 1 { 24 28 24 29 18446744073709551615 2 pt 24 30 24 32 18 1 = 24 33 24 34 21 2 ih 24 35 24 37 10 1 . 24 37 24 38 22 9 getFormer 24 38 24 47 22 1 ( 24 47 24 48 22 3 "e" 24 48 24 51 18446744073709551615 1 ) 24 51 24 52 22 1 ; 24 52 24 53 18446744073709551615 1 } 24 54 24 55 18446744073709551615 4 else 25 3 25 7 18446744073709551615 1 { 25 8 25 9 18446744073709551615 2 pt 25 10 25 12 18 1 = 25 13 25 14 21 2 ih 25 15 25 17 10 1 . 25 17 25 18 23 9 getGetter 25 18 25 27 23 1 ( 25 27 25 28 23 3 "e" 25 28 25 31 18446744073709551615 1 ) 25 31 25 32 23 1 ; 25 32 25 33 18446744073709551615 1 } 25 34 25 35 18446744073709551615 1 } 26 2 26 3 18446744073709551615 2 oh 28 2 28 4 14 1 . 28 4 28 5 24 11 addTemplate 28 5 28 16 24 1 ( 28 16 28 17 24 13 "header.html" 28 17 28 30 18446744073709551615 1 ) 28 30 28 31 24 1 ; 28 31 28 32 18446744073709551615 2 if 30 2 30 4 18446744073709551615 1 ( 30 5 30 6 18446744073709551615 1 ! 30 6 30 7 18446744073709551615 2 pt 30 7 30 9 18 1 . 30 9 30 10 25 5 empty 30 10 30 15 25 1 ( 30 15 30 16 25 1 ) 30 16 30 17 25 1 ) 30 17 30 18 18446744073709551615 1 { 30 19 30 20 18446744073709551615 3 std 31 3 31 6 1 2 :: 31 6 31 8 18446744073709551615 6 vector 31 8 31 14 2 1 < 31 14 31 15 18446744073709551615 5 token 31 15 31 20 3 1 > 31 20 31 21 18446744073709551615 3 tks 31 22 31 25 26 1 ; 31 25 31 26 18446744073709551615 8 unsigned 32 3 32 11 18446744073709551615 4 char 32 12 32 16 18446744073709551615 2 tt 32 17 32 19 27 1 = 32 20 32 21 18446744073709551615 1 0 32 22 32 23 18446744073709551615 1 ; 32 23 32 24 18446744073709551615 4 char 33 3 33 7 18446744073709551615 2 te 33 8 33 10 28 1 = 33 11 33 12 18446744073709551615 1 0 33 13 33 14 18446744073709551615 1 ; 33 14 33 15 18446744073709551615 3 int 34 3 34 6 18446744073709551615 6 pcount 34 7 34 13 29 1 = 34 14 34 15 18446744073709551615 1 0 34 16 34 17 18446744073709551615 1 ; 34 17 34 18 18446744073709551615 6 double 35 3 35 9 18446744073709551615 5 value 35 10 35 15 30 1 = 35 16 35 17 18446744073709551615 1 0 35 18 35 19 18446744073709551615 1 ; 35 19 35 20 18446744073709551615 3 std 36 3 36 6 1 2 :: 36 6 36 8 18446744073709551615 5 regex 36 8 36 13 31 2 re 36 14 36 16 32 1 ( 36 16 36 17 33 26 "([0-9.]+|[-+*^%x\/\(\)])" 36 17 36 43 18446744073709551615 1 ) 36 43 36 44 33 1 ; 36 44 36 45 18446744073709551615 3 std 37 3 37 6 1 2 :: 37 6 37 8 18446744073709551615 6 smatch 37 8 37 14 34 5 match 37 15 37 20 35 1 ; 37 20 37 21 18446744073709551615 5 while 38 3 38 8 18446744073709551615 1 ( 38 8 38 9 18446744073709551615 3 std 38 9 38 12 1 2 :: 38 12 38 14 36 12 regex_search 38 14 38 26 36 1 ( 38 26 38 27 36 2 pt 38 27 38 29 18 1 , 38 29 38 30 36 5 match 38 31 38 36 35 1 , 38 36 38 37 36 2 re 38 38 38 40 32 1 ) 38 40 38 41 36 1 ) 38 41 38 42 18446744073709551615 1 { 38 43 38 44 18446744073709551615 2 tt 39 4 39 6 27 1 = 39 7 39 8 18446744073709551615 1 0 39 9 39 10 18446744073709551615 1 ; 39 10 39 11 18446744073709551615 2 if 40 4 40 6 18446744073709551615 1 ( 40 7 40 8 18446744073709551615 5 match 40 8 40 13 35 1 . 40 13 40 14 37 4 size 40 14 40 18 37 1 ( 40 18 40 19 37 1 ) 40 19 40 20 37 2 == 40 21 40 23 18446744073709551615 1 1 40 24 40 25 18446744073709551615 1 ) 40 25 40 26 18446744073709551615 1 { 40 27 40 28 18446744073709551615 2 te 41 5 41 7 28 1 = 41 8 41 9 18446744073709551615 5 match 41 10 41 15 35 1 . 41 15 41 16 38 3 str 41 16 41 19 38 1 ( 41 19 41 20 38 1 ) 41 20 41 21 38 1 . 41 21 41 22 39 5 c_str 41 22 41 27 39 1 ( 41 27 41 28 39 1 ) 41 28 41 29 39 1 [ 41 29 41 30 18446744073709551615 1 0 41 30 41 31 18446744073709551615 1 ] 41 31 41 32 18446744073709551615 1 ; 41 32 41 33 18446744073709551615 2 if 42 5 42 7 18446744073709551615 1 ( 42 8 42 9 18446744073709551615 2 te 42 9 42 11 28 2 == 42 12 42 14 18446744073709551615 3 '(' 42 15 42 18 18446744073709551615 1 ) 42 18 42 19 18446744073709551615 1 { 42 20 42 21 18446744073709551615 2 tt 42 22 42 24 27 1 = 42 25 42 26 18446744073709551615 16 TOKEN_PAREN_OPEN 42 27 42 43 18446744073709551615 1 ; 42 43 42 44 18446744073709551615 6 pcount 42 45 42 51 29 2 ++ 42 51 42 53 18446744073709551615 1 ; 42 53 42 54 18446744073709551615 1 } 42 54 42 55 18446744073709551615 4 else 43 5 43 9 18446744073709551615 2 if 43 10 43 12 18446744073709551615 1 ( 43 13 43 14 18446744073709551615 2 te 43 14 43 16 28 2 == 43 17 43 19 18446744073709551615 3 ')' 43 20 43 23 18446744073709551615 1 ) 43 23 43 24 18446744073709551615 1 { 43 25 43 26 18446744073709551615 2 tt 43 27 43 29 27 1 = 43 30 43 31 18446744073709551615 17 TOKEN_PAREN_CLOSE 43 32 43 49 18446744073709551615 1 ; 43 49 43 50 18446744073709551615 1 } 43 51 43 52 18446744073709551615 4 else 44 5 44 9 18446744073709551615 2 if 44 10 44 12 18446744073709551615 1 ( 44 13 44 14 18446744073709551615 2 te 44 14 44 16 28 2 == 44 17 44 19 18446744073709551615 3 '^' 44 20 44 23 18446744073709551615 2 || 44 24 44 26 18446744073709551615 2 te 44 27 44 29 28 2 == 44 30 44 32 18446744073709551615 3 'e' 44 33 44 36 18446744073709551615 1 ) 44 36 44 37 18446744073709551615 1 { 44 38 44 39 18446744073709551615 2 tt 44 40 44 42 27 1 = 44 43 44 44 18446744073709551615 14 TOKEN_EXPONENT 44 45 44 59 18446744073709551615 1 ; 44 59 44 60 18446744073709551615 1 } 44 61 44 62 18446744073709551615 4 else 45 5 45 9 18446744073709551615 2 if 45 10 45 12 18446744073709551615 1 ( 45 13 45 14 18446744073709551615 2 te 45 14 45 16 28 2 == 45 17 45 19 18446744073709551615 3 '*' 45 20 45 23 18446744073709551615 2 || 45 24 45 26 18446744073709551615 2 te 45 27 45 29 28 2 == 45 30 45 32 18446744073709551615 3 'x' 45 33 45 36 18446744073709551615 1 ) 45 36 45 37 18446744073709551615 1 { 45 38 45 39 18446744073709551615 2 tt 45 40 45 42 27 1 = 45 43 45 44 18446744073709551615 10 TOKEN_MULT 45 45 45 55 18446744073709551615 1 ; 45 55 45 56 18446744073709551615 1 } 45 57 45 58 18446744073709551615 4 else 46 5 46 9 18446744073709551615 2 if 46 10 46 12 18446744073709551615 1 ( 46 13 46 14 18446744073709551615 2 te 46 14 46 16 28 2 == 46 17 46 19 18446744073709551615 3 '/' 46 20 46 23 18446744073709551615 1 ) 46 23 46 24 18446744073709551615 1 { 46 25 46 26 18446744073709551615 2 tt 46 27 46 29 27 1 = 46 30 46 31 18446744073709551615 9 TOKEN_DIV 46 32 46 41 18446744073709551615 1 ; 46 41 46 42 18446744073709551615 1 } 46 43 46 44 18446744073709551615 4 else 47 5 47 9 18446744073709551615 2 if 47 10 47 12 18446744073709551615 1 ( 47 13 47 14 18446744073709551615 2 te 47 14 47 16 28 2 == 47 17 47 19 18446744073709551615 3 '%' 47 20 47 23 18446744073709551615 1 ) 47 23 47 24 18446744073709551615 1 { 47 25 47 26 18446744073709551615 2 tt 47 27 47 29 27 1 = 47 30 47 31 18446744073709551615 9 TOKEN_MOD 47 32 47 41 18446744073709551615 1 ; 47 41 47 42 18446744073709551615 1 } 47 43 47 44 18446744073709551615 4 else 48 5 48 9 18446744073709551615 2 if 48 10 48 12 18446744073709551615 1 ( 48 13 48 14 18446744073709551615 2 te 48 14 48 16 28 2 == 48 17 48 19 18446744073709551615 3 '+' 48 20 48 23 18446744073709551615 1 ) 48 23 48 24 18446744073709551615 1 { 48 25 48 26 18446744073709551615 2 tt 48 27 48 29 27 1 = 48 30 48 31 18446744073709551615 9 TOKEN_ADD 48 32 48 41 18446744073709551615 1 ; 48 41 48 42 18446744073709551615 1 } 48 43 48 44 18446744073709551615 4 else 49 5 49 9 18446744073709551615 2 if 49 10 49 12 18446744073709551615 1 ( 49 13 49 14 18446744073709551615 2 te 49 14 49 16 28 2 == 49 17 49 19 18446744073709551615 3 '-' 49 20 49 23 18446744073709551615 1 ) 49 23 49 24 18446744073709551615 1 { 49 25 49 26 18446744073709551615 2 tt 49 27 49 29 27 1 = 49 30 49 31 18446744073709551615 9 TOKEN_SUB 49 32 49 41 18446744073709551615 1 ; 49 41 49 42 18446744073709551615 1 } 49 43 49 44 18446744073709551615 4 else 50 5 50 9 18446744073709551615 1 { 50 10 50 11 18446744073709551615 2 tt 50 12 50 14 27 1 = 50 15 50 16 18446744073709551615 12 TOKEN_NUMBER 50 17 50 29 18446744073709551615 1 ; 50 29 50 30 18446744073709551615 1 } 50 31 50 32 18446744073709551615 1 } 51 4 51 5 18446744073709551615 4 else 52 4 52 8 18446744073709551615 1 { 52 9 52 10 18446744073709551615 2 tt 52 11 52 13 27 1 = 52 14 52 15 18446744073709551615 12 TOKEN_NUMBER 52 16 52 28 18446744073709551615 1 ; 52 28 52 29 18446744073709551615 1 } 52 30 52 31 18446744073709551615 2 if 54 4 54 6 18446744073709551615 1 ( 54 7 54 8 18446744073709551615 2 tt 54 8 54 10 27 2 == 54 11 54 13 18446744073709551615 12 TOKEN_NUMBER 54 14 54 26 18446744073709551615 1 ) 54 26 54 27 18446744073709551615 1 { 54 28 54 29 18446744073709551615 5 value 54 30 54 35 30 1 = 54 36 54 37 18446744073709551615 3 std 54 38 54 41 1 2 :: 54 41 54 43 40 4 stod 54 43 54 47 40 1 ( 54 47 54 48 40 5 match 54 48 54 53 35 1 . 54 53 54 54 38 3 str 54 54 54 57 38 1 ( 54 57 54 58 38 1 ) 54 58 54 59 38 1 ) 54 59 54 60 40 1 ; 54 60 54 61 18446744073709551615 1 } 54 62 54 63 18446744073709551615 4 else 55 4 55 8 18446744073709551615 1 { 55 9 55 10 18446744073709551615 5 value 55 11 55 16 30 1 = 55 17 55 18 18446744073709551615 6 pcount 55 19 55 25 29 1 ; 55 25 55 26 18446744073709551615 1 } 55 27 55 28 18446744073709551615 3 tks 57 4 57 7 26 1 . 57 7 57 8 41 9 push_back 57 8 57 17 41 1 ( 57 17 57 18 41 5 token 57 18 57 23 3 1 { 57 23 57 24 18446744073709551615 2 tt 57 24 57 26 27 1 , 57 26 57 27 18446744073709551615 5 value 57 28 57 33 30 1 } 57 33 57 34 18446744073709551615 1 ) 57 34 57 35 41 1 ; 57 35 57 36 18446744073709551615 2 if 59 4 59 6 18446744073709551615 1 ( 59 7 59 8 18446744073709551615 2 tt 59 8 59 10 27 2 == 59 11 59 13 18446744073709551615 17 TOKEN_PAREN_CLOSE 59 14 59 31 18446744073709551615 1 ) 59 31 59 32 18446744073709551615 1 { 59 33 59 34 18446744073709551615 6 pcount 59 35 59 41 29 2 -- 59 41 59 43 18446744073709551615 1 ; 59 43 59 44 18446744073709551615 1 } 59 45 59 46 18446744073709551615 1 } 60 3 60 4 18446744073709551615 2 if 62 3 62 5 18446744073709551615 1 ( 62 6 62 7 18446744073709551615 6 pcount 62 7 62 13 29 1 > 62 14 62 15 18446744073709551615 1 0 62 16 62 17 18446744073709551615 1 ) 62 17 62 18 18446744073709551615 1 { 62 19 62 20 18446744073709551615 28 // close out all open parens 62 21 62 49 18446744073709551615 3 for 63 4 63 7 18446744073709551615 1 ( 63 8 63 9 18446744073709551615 1 ; 63 9 63 10 18446744073709551615 6 pcount 63 11 63 17 29 1 > 63 18 63 19 18446744073709551615 1 0 63 20 63 21 18446744073709551615 1 ; 63 21 63 22 18446744073709551615 6 pcount 63 23 63 29 29 2 -- 63 29 63 31 18446744073709551615 1 ) 63 31 63 32 18446744073709551615 1 { 63 33 63 34 18446744073709551615 5 value 64 5 64 10 30 1 = 64 11 64 12 18446744073709551615 6 pcount 64 13 64 19 29 1 ; 64 19 64 20 18446744073709551615 3 tks 65 5 65 8 26 1 . 65 8 65 9 41 9 push_back 65 9 65 18 41 1 ( 65 18 65 19 41 5 token 65 19 65 24 3 1 { 65 24 65 25 18446744073709551615 17 TOKEN_PAREN_CLOSE 65 25 65 42 18446744073709551615 1 , 65 42 65 43 18446744073709551615 5 value 65 44 65 49 30 1 } 65 49 65 50 18446744073709551615 1 ) 65 50 65 51 41 1 ; 65 51 65 52 18446744073709551615 1 } 66 4 66 5 18446744073709551615 1 } 67 3 67 4 18446744073709551615 1 } 68 2 68 3 18446744073709551615 2 oh 69 2 69 4 14 1 . 69 4 69 5 24 11 addTemplate 69 5 69 16 24 1 ( 69 16 69 17 24 13 "footer.html" 69 17 69 30 18446744073709551615 1 ) 69 30 69 31 24 1 ; 69 31 69 32 18446744073709551615 3 std 70 2 70 5 1 2 :: 70 5 70 7 18446744073709551615 6 string 70 7 70 13 17 7 content 70 14 70 21 42 1 = 70 22 70 23 18446744073709551615 2 oh 70 24 70 26 14 1 . 70 26 70 27 43 9 getOutput 70 27 70 36 43 1 ( 70 36 70 37 43 1 ) 70 37 70 38 43 1 ; 70 38 70 39 18446744073709551615 3 std 72 2 72 5 1 2 :: 72 5 72 7 18446744073709551615 12 stringstream 72 7 72 19 44 2 ss 72 20 72 22 45 1 ; 72 22 72 23 18446744073709551615 2 ss 73 2 73 4 45 2 << 73 5 73 7 46 44 "Content-Type: text/html; charset=UTF-8\r\n" 73 8 73 52 18446744073709551615 1 ; 73 52 73 53 18446744073709551615 2 ss 74 2 74 4 45 2 << 74 5 74 7 46 18 "Content-Length: " 74 8 74 26 18446744073709551615 2 << 74 27 74 29 46 3 std 74 30 74 33 1 2 :: 74 33 74 35 47 9 to_string 74 35 74 44 47 1 ( 74 44 74 45 47 7 content 74 45 74 52 42 1 . 74 52 74 53 48 6 length 74 53 74 59 48 1 ( 74 59 74 60 48 1 ) 74 60 74 61 48 1 ) 74 61 74 62 47 2 << 74 63 74 65 46 10 "\r\n\r\n" 74 66 74 76 18446744073709551615 1 ; 74 76 74 77 18446744073709551615 3 std 75 2 75 5 1 2 :: 75 5 75 7 18446744073709551615 6 string 75 7 75 13 17 1 s 75 14 75 15 49 1 ; 75 15 75 16 18446744073709551615 1 s 76 2 76 3 49 1 = 76 4 76 5 21 2 ss 76 6 76 8 45 1 . 76 8 76 9 50 3 str 76 9 76 12 50 1 ( 76 12 76 13 50 1 ) 76 13 76 14 50 1 ; 76 14 76 15 18446744073709551615 11 FCGX_PutStr 78 2 78 13 51 1 ( 78 13 78 14 51 1 s 78 14 78 15 49 1 . 78 15 78 16 39 5 c_str 78 16 78 21 39 1 ( 78 21 78 22 39 1 ) 78 22 78 23 39 1 , 78 23 78 24 51 1 s 78 25 78 26 49 1 . 78 26 78 27 52 4 size 78 27 78 31 52 1 ( 78 31 78 32 52 1 ) 78 32 78 33 52 1 , 78 33 78 34 51 2 rq 78 35 78 37 7 2 -> 78 37 78 39 18446744073709551615 3 out 78 39 78 42 53 1 ) 78 42 78 43 51 1 ; 78 43 78 44 18446744073709551615 11 FCGX_PutStr 79 2 79 13 51 1 ( 79 13 79 14 51 7 content 79 14 79 21 42 1 . 79 21 79 22 39 5 c_str 79 22 79 27 39 1 ( 79 27 79 28 39 1 ) 79 28 79 29 39 1 , 79 29 79 30 51 7 content 79 31 79 38 42 1 . 79 38 79 39 52 4 size 79 39 79 43 52 1 ( 79 43 79 44 52 1 ) 79 44 79 45 52 1 , 79 45 79 46 51 2 rq 79 47 79 49 7 2 -> 79 49 79 51 18446744073709551615 3 out 79 51 79 54 53 1 ) 79 54 79 55 51 1 ; 79 55 79 56 18446744073709551615 1 } 81 1 81 2 18446744073709551615 4 void 83 1 83 5 18446744073709551615 8 replacer 83 6 83 14 54 1 ( 83 14 83 15 54 3 std 83 15 83 18 1 2 :: 83 18 83 20 18446744073709551615 6 vector 83 20 83 26 2 1 < 83 26 83 27 18446744073709551615 5 token 83 27 83 32 3 1 > 83 32 83 33 18446744073709551615 1 & 83 34 83 35 18446744073709551615 5 input 83 35 83 40 55 1 , 83 40 83 41 54 8 unsigned 83 42 83 50 18446744073709551615 3 int 83 51 83 54 18446744073709551615 3 pos 83 55 83 58 56 1 , 83 58 83 59 54 5 token 83 60 83 65 3 4 nval 83 66 83 70 57 1 ) 83 70 83 71 54 1 { 83 72 83 73 18446744073709551615 3 std 84 2 84 5 1 2 :: 84 5 84 7 18446744073709551615 6 vector 84 7 84 13 2 1 < 84 13 84 14 18446744073709551615 5 token 84 14 84 19 3 1 > 84 19 84 20 18446744073709551615 3 tmp 84 21 84 24 58 1 ; 84 24 84 25 18446744073709551615 3 for 85 2 85 5 18446744073709551615 1 ( 85 6 85 7 18446744073709551615 3 int 85 7 85 10 18446744073709551615 1 a 85 11 85 12 59 1 = 85 13 85 14 18446744073709551615 1 0 85 15 85 16 18446744073709551615 1 ; 85 16 85 17 18446744073709551615 1 a 85 18 85 19 59 1 < 85 20 85 21 18446744073709551615 5 input 85 22 85 27 55 1 . 85 27 85 28 60 4 size 85 28 85 32 60 1 ( 85 32 85 33 60 1 ) 85 33 85 34 60 1 ; 85 34 85 35 18446744073709551615 1 a 85 36 85 37 59 2 ++ 85 37 85 39 18446744073709551615 1 ) 85 39 85 40 18446744073709551615 1 { 85 41 85 42 18446744073709551615 2 if 86 3 86 5 18446744073709551615 1 ( 86 6 86 7 18446744073709551615 1 a 86 7 86 8 59 2 == 86 9 86 11 18446744073709551615 3 pos 86 12 86 15 56 1 - 86 16 86 17 18446744073709551615 1 1 86 18 86 19 18446744073709551615 2 || 86 20 86 22 18446744073709551615 1 a 86 23 86 24 59 2 == 86 25 86 27 18446744073709551615 3 pos 86 28 86 31 56 1 + 86 32 86 33 18446744073709551615 1 1 86 34 86 35 18446744073709551615 1 ) 86 35 86 36 18446744073709551615 1 { 86 37 86 38 18446744073709551615 1 } 86 38 86 39 18446744073709551615 4 else 87 3 87 7 18446744073709551615 2 if 87 8 87 10 18446744073709551615 1 ( 87 11 87 12 18446744073709551615 1 a 87 12 87 13 59 2 == 87 14 87 16 18446744073709551615 3 pos 87 17 87 20 56 1 ) 87 20 87 21 18446744073709551615 1 { 87 22 87 23 18446744073709551615 3 tmp 87 24 87 27 58 1 . 87 27 87 28 41 9 push_back 87 28 87 37 41 1 ( 87 37 87 38 41 4 nval 87 38 87 42 57 1 ) 87 42 87 43 41 1 ; 87 43 87 44 18446744073709551615 1 } 87 45 87 46 18446744073709551615 4 else 88 3 88 7 18446744073709551615 1 { 88 8 88 9 18446744073709551615 3 tmp 88 10 88 13 58 1 . 88 13 88 14 41 9 push_back 88 14 88 23 41 1 ( 88 23 88 24 41 5 input 88 24 88 29 55 1 [ 88 29 88 30 61 1 a 88 30 88 31 59 1 ] 88 31 88 32 61 1 ) 88 32 88 33 41 1 ; 88 33 88 34 18446744073709551615 1 } 88 35 88 36 18446744073709551615 1 } 89 2 89 3 18446744073709551615 5 input 90 2 90 7 55 1 . 90 7 90 8 62 5 clear 90 8 90 13 62 1 ( 90 13 90 14 62 1 ) 90 14 90 15 62 1 ; 90 15 90 16 18446744073709551615 3 for 91 2 91 5 18446744073709551615 1 ( 91 6 91 7 18446744073709551615 3 int 91 7 91 10 18446744073709551615 1 a 91 11 91 12 63 1 = 91 13 91 14 18446744073709551615 1 0 91 15 91 16 18446744073709551615 1 ; 91 16 91 17 18446744073709551615 1 a 91 18 91 19 63 1 < 91 20 91 21 18446744073709551615 3 tmp 91 22 91 25 58 1 . 91 25 91 26 60 4 size 91 26 91 30 60 1 ( 91 30 91 31 60 1 ) 91 31 91 32 60 1 ; 91 32 91 33 18446744073709551615 1 a 91 34 91 35 63 2 ++ 91 35 91 37 18446744073709551615 1 ) 91 37 91 38 18446744073709551615 1 { 91 39 91 40 18446744073709551615 5 input 92 3 92 8 55 1 . 92 8 92 9 41 9 push_back 92 9 92 18 41 1 ( 92 18 92 19 41 3 tmp 92 19 92 22 58 1 [ 92 22 92 23 61 1 a 92 23 92 24 63 1 ] 92 24 92 25 61 1 ) 92 25 92 26 41 1 ; 92 26 92 27 18446744073709551615 1 } 93 2 93 3 18446744073709551615 1 } 94 1 94 2 18446744073709551615 85 // we're going to use recursion here, this will handle all the parenthesis separation 96 1 96 86 18446744073709551615 34 // and run those in recursed calls 97 1 97 35 18446744073709551615 4 void 98 1 98 5 18446744073709551615 6 solver 98 6 98 12 0 1 ( 98 12 98 13 0 3 std 98 13 98 16 1 2 :: 98 16 98 18 18446744073709551615 6 vector 98 18 98 24 2 1 < 98 24 98 25 18446744073709551615 5 token 98 25 98 30 3 1 > 98 30 98 31 18446744073709551615 1 & 98 32 98 33 18446744073709551615 5 input 98 33 98 38 64 1 ) 98 38 98 39 0 1 { 98 40 98 41 18446744073709551615 8 unsigned 99 2 99 10 18446744073709551615 3 int 99 11 99 14 18446744073709551615 1 a 99 15 99 16 65 1 = 99 17 99 18 18446744073709551615 1 0 99 19 99 20 18446744073709551615 1 ; 99 20 99 21 18446744073709551615 4 bool 100 2 100 6 18446744073709551615 8 hasParen 100 7 100 15 66 1 = 100 16 100 17 18446744073709551615 5 false 100 18 100 23 18446744073709551615 1 ; 100 23 100 24 18446744073709551615 3 for 101 2 101 5 18446744073709551615 1 ( 101 6 101 7 18446744073709551615 1 a 101 7 101 8 65 1 = 101 9 101 10 18446744073709551615 1 0 101 11 101 12 18446744073709551615 1 ; 101 12 101 13 18446744073709551615 1 a 101 14 101 15 65 1 < 101 16 101 17 18446744073709551615 5 input 101 18 101 23 64 1 . 101 23 101 24 60 4 size 101 24 101 28 60 1 ( 101 28 101 29 60 1 ) 101 29 101 30 60 2 || 101 31 101 33 18446744073709551615 1 ! 101 34 101 35 18446744073709551615 8 hasParen 101 35 101 43 66 1 ; 101 43 101 44 18446744073709551615 1 a 101 45 101 46 65 2 ++ 101 46 101 48 18446744073709551615 1 ) 101 48 101 49 18446744073709551615 1 { 101 50 101 51 18446744073709551615 2 if 102 3 102 5 18446744073709551615 1 ( 102 6 102 7 18446744073709551615 5 input 102 7 102 12 64 1 [ 102 12 102 13 61 1 a 102 13 102 14 65 1 ] 102 14 102 15 61 1 . 102 15 102 16 18446744073709551615 4 type 102 16 102 20 67 2 == 102 21 102 23 18446744073709551615 16 TOKEN_PAREN_OPEN 102 24 102 40 18446744073709551615 1 ) 102 40 102 41 18446744073709551615 1 { 102 42 102 43 18446744073709551615 8 hasParen 102 44 102 52 66 1 = 102 53 102 54 18446744073709551615 4 true 102 55 102 59 18446744073709551615 1 ; 102 59 102 60 18446744073709551615 1 } 102 61 102 62 18446744073709551615 1 } 103 2 103 3 18446744073709551615 2 if 104 2 104 4 18446744073709551615 1 ( 104 5 104 6 18446744073709551615 8 hasParen 104 6 104 14 66 1 ) 104 14 104 15 18446744073709551615 1 { 104 16 104 17 18446744073709551615 1 } 106 2 106 3 18446744073709551615 12 // exponents 108 2 108 14 18446744073709551615 3 for 109 2 109 5 18446744073709551615 1 ( 109 6 109 7 18446744073709551615 1 a 109 7 109 8 65 1 = 109 9 109 10 18446744073709551615 1 0 109 11 109 12 18446744073709551615 1 ; 109 12 109 13 18446744073709551615 1 a 109 14 109 15 65 1 < 109 16 109 17 18446744073709551615 5 input 109 18 109 23 64 1 . 109 23 109 24 60 4 size 109 24 109 28 60 1 ( 109 28 109 29 60 1 ) 109 29 109 30 60 1 ; 109 30 109 31 18446744073709551615 1 a 109 32 109 33 65 2 ++ 109 33 109 35 18446744073709551615 1 ) 109 35 109 36 18446744073709551615 1 { 109 37 109 38 18446744073709551615 2 if 110 3 110 5 18446744073709551615 1 ( 110 6 110 7 18446744073709551615 5 input 110 7 110 12 64 1 [ 110 12 110 13 61 1 a 110 13 110 14 65 1 ] 110 14 110 15 61 1 . 110 15 110 16 18446744073709551615 4 type 110 16 110 20 67 2 == 110 21 110 23 18446744073709551615 14 TOKEN_EXPONENT 110 24 110 38 18446744073709551615 1 ) 110 38 110 39 18446744073709551615 1 { 110 40 110 41 18446744073709551615 8 replacer 111 4 111 12 54 1 ( 111 12 111 13 54 5 input 111 13 111 18 64 1 , 111 18 111 19 54 1 a 111 20 111 21 65 1 , 111 21 111 22 54 5 token 111 23 111 28 3 1 { 111 28 111 29 18446744073709551615 12 TOKEN_NUMBER 111 29 111 41 18446744073709551615 1 , 111 41 111 42 18446744073709551615 3 std 111 43 111 46 1 2 :: 111 46 111 48 68 3 pow 111 48 111 51 68 1 ( 111 51 111 52 68 5 input 111 52 111 57 64 1 [ 111 57 111 58 61 1 a 111 58 111 59 65 1 - 111 60 111 61 18446744073709551615 1 1 111 62 111 63 18446744073709551615 1 ] 111 63 111 64 61 1 . 111 64 111 65 18446744073709551615 5 value 111 65 111 70 69 1 , 111 70 111 71 68 5 input 111 72 111 77 64 1 [ 111 77 111 78 61 1 a 111 78 111 79 65 1 + 111 81 111 82 18446744073709551615 1 1 111 82 111 83 18446744073709551615 1 ] 111 83 111 84 61 1 . 111 84 111 85 18446744073709551615 5 value 111 85 111 90 69 1 ) 111 90 111 91 68 1 } 111 91 111 92 18446744073709551615 1 ) 111 92 111 93 54 1 ; 111 93 111 94 18446744073709551615 1 } 112 3 112 4 18446744073709551615 1 } 113 2 113 3 18446744073709551615 7 // mult 115 2 115 9 18446744073709551615 3 for 116 2 116 5 18446744073709551615 1 ( 116 6 116 7 18446744073709551615 1 a 116 7 116 8 65 1 = 116 9 116 10 18446744073709551615 1 0 116 11 116 12 18446744073709551615 1 ; 116 12 116 13 18446744073709551615 1 a 116 14 116 15 65 1 < 116 16 116 17 18446744073709551615 5 input 116 18 116 23 64 1 . 116 23 116 24 60 4 size 116 24 116 28 60 1 ( 116 28 116 29 60 1 ) 116 29 116 30 60 1 ; 116 30 116 31 18446744073709551615 1 a 116 32 116 33 65 2 ++ 116 33 116 35 18446744073709551615 1 ) 116 35 116 36 18446744073709551615 1 { 116 37 116 38 18446744073709551615 2 if 117 3 117 5 18446744073709551615 1 ( 117 6 117 7 18446744073709551615 5 input 117 7 117 12 64 1 [ 117 12 117 13 61 1 a 117 13 117 14 65 1 ] 117 14 117 15 61 1 . 117 15 117 16 18446744073709551615 4 type 117 16 117 20 67 2 == 117 21 117 23 18446744073709551615 14 TOKEN_EXPONENT 117 24 117 38 18446744073709551615 1 ) 117 38 117 39 18446744073709551615 1 { 117 40 117 41 18446744073709551615 8 replacer 118 4 118 12 54 1 ( 118 12 118 13 54 5 input 118 13 118 18 64 1 , 118 18 118 19 54 1 a 118 20 118 21 65 1 , 118 21 118 22 54 5 input 118 23 118 28 64 1 [ 118 28 118 29 61 1 a 118 29 118 30 65 1 - 118 31 118 32 18446744073709551615 1 1 118 33 118 34 18446744073709551615 1 ] 118 34 118 35 61 1 * 118 36 118 37 70 5 input 118 38 118 43 64 1 [ 118 43 118 44 61 1 a 118 44 118 45 65 1 + 118 46 118 47 18446744073709551615 1 1 118 48 118 49 18446744073709551615 1 ] 118 49 118 50 61 1 ) 118 50 118 51 54 1 ; 118 51 118 52 18446744073709551615 1 } 119 3 119 4 18446744073709551615 1 } 120 2 120 3 18446744073709551615 6 // div 121 2 121 8 18446744073709551615 3 for 122 2 122 5 18446744073709551615 1 ( 122 6 122 7 18446744073709551615 1 a 122 7 122 8 65 1 = 122 9 122 10 18446744073709551615 1 0 122 11 122 12 18446744073709551615 1 ; 122 12 122 13 18446744073709551615 1 a 122 14 122 15 65 1 < 122 16 122 17 18446744073709551615 5 input 122 18 122 23 64 1 . 122 23 122 24 60 4 size 122 24 122 28 60 1 ( 122 28 122 29 60 1 ) 122 29 122 30 60 1 ; 122 30 122 31 18446744073709551615 1 a 122 32 122 33 65 2 ++ 122 33 122 35 18446744073709551615 1 ) 122 35 122 36 18446744073709551615 1 { 122 37 122 38 18446744073709551615 2 if 123 3 123 5 18446744073709551615 1 ( 123 6 123 7 18446744073709551615 5 input 123 7 123 12 64 1 [ 123 12 123 13 61 1 a 123 13 123 14 65 1 ] 123 14 123 15 61 1 . 123 15 123 16 18446744073709551615 4 type 123 16 123 20 67 2 == 123 21 123 23 18446744073709551615 14 TOKEN_EXPONENT 123 24 123 38 18446744073709551615 1 ) 123 38 123 39 18446744073709551615 1 { 123 40 123 41 18446744073709551615 8 replacer 124 4 124 12 54 1 ( 124 12 124 13 54 5 input 124 13 124 18 64 1 , 124 18 124 19 54 1 a 124 20 124 21 65 1 , 124 21 124 22 54 5 input 124 23 124 28 64 1 [ 124 28 124 29 61 1 a 124 29 124 30 65 1 - 124 31 124 32 18446744073709551615 1 1 124 33 124 34 18446744073709551615 1 ] 124 34 124 35 61 1 / 124 36 124 37 71 5 input 124 38 124 43 64 1 [ 124 43 124 44 61 1 a 124 44 124 45 65 1 + 124 46 124 47 18446744073709551615 1 1 124 48 124 49 18446744073709551615 1 ] 124 49 124 50 61 1 ) 124 50 124 51 54 1 ; 124 51 124 52 18446744073709551615 1 } 125 3 125 4 18446744073709551615 1 } 126 2 126 3 18446744073709551615 3 for 127 2 127 5 18446744073709551615 1 ( 127 6 127 7 18446744073709551615 1 a 127 7 127 8 65 1 = 127 9 127 10 18446744073709551615 1 0 127 11 127 12 18446744073709551615 1 ; 127 12 127 13 18446744073709551615 1 a 127 14 127 15 65 1 < 127 16 127 17 18446744073709551615 5 input 127 18 127 23 64 1 . 127 23 127 24 60 4 size 127 24 127 28 60 1 ( 127 28 127 29 60 1 ) 127 29 127 30 60 1 ; 127 30 127 31 18446744073709551615 1 a 127 32 127 33 65 2 ++ 127 33 127 35 18446744073709551615 1 ) 127 35 127 36 18446744073709551615 1 { 127 37 127 38 18446744073709551615 2 if 128 3 128 5 18446744073709551615 1 ( 128 6 128 7 18446744073709551615 5 input 128 7 128 12 64 1 [ 128 12 128 13 61 1 a 128 13 128 14 65 1 ] 128 14 128 15 61 1 . 128 15 128 16 18446744073709551615 4 type 128 16 128 20 67 2 == 128 21 128 23 18446744073709551615 14 TOKEN_EXPONENT 128 24 128 38 18446744073709551615 1 ) 128 38 128 39 18446744073709551615 1 { 128 40 128 41 18446744073709551615 8 replacer 129 4 129 12 54 1 ( 129 12 129 13 54 5 input 129 13 129 18 64 1 , 129 18 129 19 54 1 a 129 20 129 21 65 1 , 129 21 129 22 54 5 input 129 23 129 28 64 1 [ 129 28 129 29 61 1 a 129 29 129 30 65 1 - 129 31 129 32 18446744073709551615 1 1 129 33 129 34 18446744073709551615 1 ] 129 34 129 35 61 1 % 129 36 129 37 72 5 input 129 38 129 43 64 1 [ 129 43 129 44 61 1 a 129 44 129 45 65 1 + 129 46 129 47 18446744073709551615 1 1 129 48 129 49 18446744073709551615 1 ] 129 49 129 50 61 1 ) 129 50 129 51 54 1 ; 129 51 129 52 18446744073709551615 1 } 130 3 130 4 18446744073709551615 1 } 131 2 131 3 18446744073709551615 6 // add 132 2 132 8 18446744073709551615 3 for 133 2 133 5 18446744073709551615 1 ( 133 6 133 7 18446744073709551615 1 a 133 7 133 8 65 1 = 133 9 133 10 18446744073709551615 1 0 133 11 133 12 18446744073709551615 1 ; 133 12 133 13 18446744073709551615 1 a 133 14 133 15 65 1 < 133 16 133 17 18446744073709551615 5 input 133 18 133 23 64 1 . 133 23 133 24 60 4 size 133 24 133 28 60 1 ( 133 28 133 29 60 1 ) 133 29 133 30 60 1 ; 133 30 133 31 18446744073709551615 1 a 133 32 133 33 65 2 ++ 133 33 133 35 18446744073709551615 1 ) 133 35 133 36 18446744073709551615 1 { 133 37 133 38 18446744073709551615 2 if 134 3 134 5 18446744073709551615 1 ( 134 6 134 7 18446744073709551615 5 input 134 7 134 12 64 1 [ 134 12 134 13 61 1 a 134 13 134 14 65 1 ] 134 14 134 15 61 1 . 134 15 134 16 18446744073709551615 4 type 134 16 134 20 67 2 == 134 21 134 23 18446744073709551615 14 TOKEN_EXPONENT 134 24 134 38 18446744073709551615 1 ) 134 38 134 39 18446744073709551615 1 { 134 40 134 41 18446744073709551615 8 replacer 135 4 135 12 54 1 ( 135 12 135 13 54 5 input 135 13 135 18 64 1 , 135 18 135 19 54 1 a 135 20 135 21 65 1 , 135 21 135 22 54 5 input 135 23 135 28 64 1 [ 135 28 135 29 61 1 a 135 29 135 30 65 1 - 135 31 135 32 18446744073709551615 1 1 135 33 135 34 18446744073709551615 1 ] 135 34 135 35 61 1 + 135 36 135 37 73 5 input 135 38 135 43 64 1 [ 135 43 135 44 61 1 a 135 44 135 45 65 1 + 135 46 135 47 18446744073709551615 1 1 135 48 135 49 18446744073709551615 1 ] 135 49 135 50 61 1 ) 135 50 135 51 54 1 ; 135 51 135 52 18446744073709551615 1 } 136 3 136 4 18446744073709551615 1 } 137 2 137 3 18446744073709551615 6 // sub 138 2 138 8 18446744073709551615 3 for 139 2 139 5 18446744073709551615 1 ( 139 6 139 7 18446744073709551615 1 a 139 7 139 8 65 1 = 139 9 139 10 18446744073709551615 1 0 139 11 139 12 18446744073709551615 1 ; 139 12 139 13 18446744073709551615 1 a 139 14 139 15 65 1 < 139 16 139 17 18446744073709551615 5 input 139 18 139 23 64 1 . 139 23 139 24 60 4 size 139 24 139 28 60 1 ( 139 28 139 29 60 1 ) 139 29 139 30 60 1 ; 139 30 139 31 18446744073709551615 1 a 139 32 139 33 65 2 ++ 139 33 139 35 18446744073709551615 1 ) 139 35 139 36 18446744073709551615 1 { 139 37 139 38 18446744073709551615 2 if 140 3 140 5 18446744073709551615 1 ( 140 6 140 7 18446744073709551615 5 input 140 7 140 12 64 1 [ 140 12 140 13 61 1 a 140 13 140 14 65 1 ] 140 14 140 15 61 1 . 140 15 140 16 18446744073709551615 4 type 140 16 140 20 67 2 == 140 21 140 23 18446744073709551615 14 TOKEN_EXPONENT 140 24 140 38 18446744073709551615 1 ) 140 38 140 39 18446744073709551615 1 { 140 40 140 41 18446744073709551615 8 replacer 141 4 141 12 54 1 ( 141 12 141 13 54 5 input 141 13 141 18 64 1 , 141 18 141 19 54 1 a 141 20 141 21 65 1 , 141 21 141 22 54 5 input 141 23 141 28 64 1 [ 141 28 141 29 61 1 a 141 29 141 30 65 1 - 141 31 141 32 18446744073709551615 1 1 141 33 141 34 18446744073709551615 1 ] 141 34 141 35 61 1 - 141 36 141 37 74 5 input 141 38 141 43 64 1 [ 141 43 141 44 61 1 a 141 44 141 45 65 1 + 141 46 141 47 18446744073709551615 1 1 141 48 141 49 18446744073709551615 1 ] 141 49 141 50 61 1 ) 141 50 141 51 54 1 ; 141 51 141 52 18446744073709551615 1 } 142 3 142 4 18446744073709551615 1 } 143 2 143 3 18446744073709551615 1 } 144 1 144 2 18446744073709551615 0 0 75 0 0 0 8 0 0 1 2 0 6 solver 22 1 2 0 3 std 31 1 2 0 14 vector:__1:std 20 1 2 0 5 token 10 1 2 0 58 13:32:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 8 1 2 0 7 runtask 20 1 2 0 12 FCGX_Request 10 1 2 0 58 15:28:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 22 1 2 0 4 util 4 1 2 0 16 InputHelper:util 9 1 2 0 58 16:20:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 6 1 2 0 15 in:FCGX_Request 6 1 2 0 17 envp:FCGX_Request 4 1 2 0 17 OutputHelper:util 9 1 2 0 58 17:21:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 21 1 2 0 26 addValue:OutputHelper:util 21 1 2 0 26 getHeader:InputHelper:util 20 1 2 0 14 string:__1:std 9 1 2 0 58 22:14:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 21 1 2 0 28 existGetter:InputHelper:util 21 1 2 0 28 existFormer:InputHelper:util 21 1 2 0 30 operator=:basic_string:__1:std 21 1 2 0 26 getFormer:InputHelper:util 21 1 2 0 26 getGetter:InputHelper:util 21 1 2 0 29 addTemplate:OutputHelper:util 21 1 2 0 26 empty:basic_string:__1:std 9 1 2 0 58 31:22:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 58 32:17:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 57 33:8:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 57 34:7:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 58 35:10:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 20 1 2 0 13 regex:__1:std 9 1 2 0 58 36:14:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 24 1 2 0 19 basic_regex:__1:std 20 1 2 0 14 smatch:__1:std 9 1 2 0 58 37:15:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 8 1 2 0 20 regex_search:__1:std 21 1 2 0 26 size:match_results:__1:std 21 1 2 0 25 str:match_results:__1:std 21 1 2 0 26 c_str:basic_string:__1:std 8 1 2 0 12 stod:__1:std 21 1 2 0 24 push_back:vector:__1:std 9 1 2 0 58 70:14:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 21 1 2 0 27 getOutput:OutputHelper:util 20 1 2 0 20 stringstream:__1:std 9 1 2 0 58 72:20:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 8 1 2 0 16 operator:__1:std 8 1 2 0 17 to_string:__1:std 21 1 2 0 27 length:basic_string:__1:std 9 1 2 0 58 75:14:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 21 1 2 0 30 str:basic_stringstream:__1:std 8 1 2 0 11 FCGX_PutStr 21 1 2 0 25 size:basic_string:__1:std 6 1 2 0 16 out:FCGX_Request 8 1 2 0 8 replacer 10 1 2 0 58 83:35:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 10 1 2 0 58 83:55:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 10 1 2 0 58 83:66:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 58 84:21:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 58 85:11:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 21 1 2 0 19 size:vector:__1:std 21 1 2 0 25 operator[]:vector:__1:std 21 1 2 0 20 clear:vector:__1:std 9 1 2 0 58 91:11:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 10 1 2 0 58 98:33:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 58 99:15:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 9 1 2 0 58 100:7:/usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 6 1 2 0 11 type:tokens 8 1 2 0 3 pow 6 1 2 0 12 value:tokens 8 1 2 0 9 operator* 8 1 2 0 9 operator/ 8 1 2 0 9 operator% 8 1 2 0 9 operator+ 8 1 2 0 9 operator- 0 0 6 0 0 0 52 /usr/home/jlhawkwell/Projects/klaculate/src/klac.cpp 1629620901 50 /usr/home/jlhawkwell/Projects/klaculate/src/klac.h 1629610405 55 /usr/home/jlhawkwell/Projects/klaculate/src/klaculate.h 1629620449 50 /usr/home/jlhawkwell/Projects/klaculate/src/ktok.h 1629615791 62 /usr/home/jlhawkwell/Projects/klaculate/src/util/InputHelper.h 1629612523 63 /usr/home/jlhawkwell/Projects/klaculate/src/util/OutputHelper.h 1629618856