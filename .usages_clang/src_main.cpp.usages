22 serialization::archive 17 0 0 0 0 39 /usr/home/jlhawkwell/Projects/klaculate 39 /usr/home/jlhawkwell/Projects/klaculate 0 0 1157 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 7 cstdlib 1 11 1 18 18446744073709551615 1 > 1 18 1 19 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 6 cstdio 2 11 2 17 18446744073709551615 1 > 2 17 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 cerrno 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 8 iostream 4 11 4 19 18446744073709551615 1 > 4 19 4 20 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 istream 5 11 5 18 18446744073709551615 1 > 5 18 5 19 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 7 ostream 6 11 6 18 18446744073709551615 1 > 6 18 6 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 3 sys 8 11 8 14 18446744073709551615 1 / 8 14 8 15 18446744073709551615 4 stat 8 15 8 19 18446744073709551615 1 . 8 19 8 20 18446744073709551615 1 h 8 20 8 21 18446744073709551615 1 > 8 21 8 22 18446744073709551615 1 # 10 1 10 2 18446744073709551615 7 include 10 2 10 9 18446744073709551615 1 < 10 10 10 11 18446744073709551615 7 pthread 10 11 10 18 18446744073709551615 1 . 10 18 10 19 18446744073709551615 1 h 10 19 10 20 18446744073709551615 1 > 10 20 10 21 18446744073709551615 1 # 11 1 11 2 18446744073709551615 7 include 11 2 11 9 18446744073709551615 1 < 11 10 11 11 18446744073709551615 6 signal 11 11 11 17 18446744073709551615 1 . 11 17 11 18 18446744073709551615 1 h 11 18 11 19 18446744073709551615 1 > 11 19 11 20 18446744073709551615 1 # 12 1 12 2 18446744073709551615 7 include 12 2 12 9 18446744073709551615 1 < 12 10 12 11 18446744073709551615 6 unistd 12 11 12 17 18446744073709551615 1 . 12 17 12 18 18446744073709551615 1 h 12 18 12 19 18446744073709551615 1 > 12 19 12 20 18446744073709551615 1 # 13 1 13 2 18446744073709551615 7 include 13 2 13 9 18446744073709551615 1 < 13 10 13 11 18446744073709551615 5 fcntl 13 11 13 16 18446744073709551615 1 . 13 16 13 17 18446744073709551615 1 h 13 17 13 18 18446744073709551615 1 > 13 18 13 19 18446744073709551615 1 # 14 1 14 2 18446744073709551615 7 include 14 2 14 9 18446744073709551615 1 < 14 10 14 11 18446744073709551615 4 time 14 11 14 15 18446744073709551615 1 . 14 15 14 16 18446744073709551615 1 h 14 16 14 17 18446744073709551615 1 > 14 17 14 18 18446744073709551615 1 # 15 1 15 2 18446744073709551615 7 include 15 2 15 9 18446744073709551615 1 < 15 10 15 11 18446744073709551615 7 libutil 15 11 15 18 18446744073709551615 1 . 15 18 15 19 18446744073709551615 1 h 15 19 15 20 18446744073709551615 1 > 15 20 15 21 18446744073709551615 1 # 16 1 16 2 18446744073709551615 7 include 16 2 16 9 18446744073709551615 1 < 16 10 16 11 18446744073709551615 6 dirent 16 11 16 17 18446744073709551615 1 . 16 17 16 18 18446744073709551615 1 h 16 18 16 19 18446744073709551615 1 > 16 19 16 20 18446744073709551615 1 # 18 1 18 2 18446744073709551615 7 include 18 2 18 9 18446744073709551615 1 < 18 10 18 11 18446744073709551615 7 fcgiapp 18 11 18 18 18446744073709551615 1 . 18 18 18 19 18446744073709551615 1 h 18 19 18 20 18446744073709551615 1 > 18 20 18 21 18446744073709551615 1 # 20 1 20 2 18446744073709551615 7 include 20 2 20 9 18446744073709551615 13 "klaculate.h" 20 10 20 23 18446744073709551615 1 # 21 1 21 2 18446744073709551615 7 include 21 2 21 9 18446744073709551615 8 "klac.h" 21 10 21 18 18446744073709551615 1 # 22 1 22 2 18446744073709551615 7 include 22 2 22 9 18446744073709551615 20 "util/InputHelper.h" 22 10 22 30 18446744073709551615 1 # 23 1 23 2 18446744073709551615 7 include 23 2 23 9 18446744073709551615 21 "util/OutputHelper.h" 23 10 23 31 18446744073709551615 154 /*
 * Adapted from https://gist.github.com/dermesser/e2f9b66457ae19ebd116
 * Adapted from https://forums.freebsd.org/threads/sample-daemon-in-c.73059/
 */ 24 1 27 4 18446744073709551615 1 # 29 1 29 2 18446744073709551615 6 define 29 2 29 8 18446744073709551615 8 _countof 29 9 29 17 18446744073709551615 1 ( 29 17 29 18 18446744073709551615 3 arg 29 18 29 21 18446744073709551615 1 ) 29 21 29 22 18446744073709551615 1 ( 29 23 29 24 18446744073709551615 1 ( 29 25 29 26 18446744073709551615 6 sizeof 29 26 29 32 18446744073709551615 3 arg 29 33 29 36 18446744073709551615 1 ) 29 36 29 37 18446744073709551615 1 / 29 38 29 39 18446744073709551615 1 ( 29 40 29 41 18446744073709551615 6 sizeof 29 41 29 47 18446744073709551615 3 arg 29 48 29 51 18446744073709551615 1 [ 29 51 29 52 18446744073709551615 1 0 29 52 29 53 18446744073709551615 1 ] 29 53 29 54 18446744073709551615 1 ) 29 54 29 55 18446744073709551615 1 ) 29 56 29 57 18446744073709551615 5 const 31 1 31 6 18446744073709551615 4 char 31 7 31 11 18446744073709551615 1 * 31 11 31 12 18446744073709551615 5 const 31 13 31 18 18446744073709551615 8 sockpath 31 19 31 27 0 1 = 31 28 31 29 18446744073709551615 21 "/tmp/klaculate.sock" 31 30 31 51 18446744073709551615 1 ; 31 51 31 52 18446744073709551615 4 void 33 1 33 5 18446744073709551615 1 * 33 5 33 6 1 17 start_fcgi_worker 33 7 33 24 1 1 ( 33 24 33 25 1 4 void 33 25 33 29 18446744073709551615 1 * 33 29 33 30 18446744073709551615 3 arg 33 31 33 34 2 1 ) 33 34 33 35 1 1 ; 33 35 33 36 18446744073709551615 6 static 34 1 34 7 18446744073709551615 4 void 34 8 34 12 18446744073709551615 7 control 34 13 34 20 3 1 ( 34 20 34 21 3 3 int 34 21 34 24 18446744073709551615 3 sig 34 25 34 28 4 1 ) 34 28 34 29 3 1 ; 34 29 34 30 18446744073709551615 4 void 35 1 35 5 18446744073709551615 9 runFolder 35 6 35 15 5 1 ( 35 15 35 16 5 3 std 35 16 35 19 6 2 :: 35 19 35 21 18446744073709551615 6 string 35 21 35 27 7 6 folder 35 28 35 34 8 1 , 35 34 35 35 5 4 util 35 36 35 40 9 2 :: 35 40 35 42 18446744073709551615 12 OutputHelper 35 42 35 54 10 1 * 35 54 35 55 18446744073709551615 2 oh 35 56 35 58 11 1 ) 35 58 35 59 5 1 ; 35 59 35 60 18446744073709551615 4 bool 37 1 37 5 18446744073709551615 11 stopService 37 6 37 17 12 1 = 37 18 37 19 18446744073709551615 5 false 37 20 37 25 18446744073709551615 1 ; 37 25 37 26 18446744073709551615 5 const 39 1 39 6 18446744073709551615 8 unsigned 39 7 39 15 18446744073709551615 3 int 39 16 39 19 18446744073709551615 9 n_threads 39 20 39 29 13 1 = 39 30 39 31 18446744073709551615 1 4 39 32 39 33 18446744073709551615 1 ; 39 33 39 34 18446744073709551615 9 pthread_t 40 1 40 10 14 7 threads 40 11 40 18 15 1 [ 40 18 40 19 18446744073709551615 9 n_threads 40 19 40 28 13 1 + 40 29 40 30 18446744073709551615 1 1 40 31 40 32 18446744073709551615 1 ] 40 32 40 33 18446744073709551615 1 ; 40 33 40 34 18446744073709551615 6 struct 42 1 42 7 18446744073709551615 9 FCGI_Info 42 8 42 17 16 1 { 42 18 42 19 18446744073709551615 3 int 43 2 43 5 18446744073709551615 7 fcgi_fd 43 6 43 13 17 1 ; 43 13 43 14 18446744073709551615 1 } 44 1 44 2 18446744073709551615 1 ; 44 2 44 3 18446744073709551615 3 int 46 1 46 4 18446744073709551615 4 main 46 5 46 9 18 1 ( 46 9 46 10 18 3 int 46 10 46 13 18446744073709551615 4 argc 46 14 46 18 19 1 , 46 18 46 19 18 4 char 46 20 46 24 18446744073709551615 1 * 46 24 46 25 18446744073709551615 1 * 46 25 46 26 18446744073709551615 4 argv 46 27 46 31 20 1 ) 46 31 46 32 18 1 { 46 33 46 34 18446744073709551615 3 std 47 2 47 5 6 2 :: 47 5 47 7 18446744073709551615 4 cout 47 7 47 11 21 2 << 47 12 47 14 22 14 KLACULATE_NAME 47 15 47 29 22 2 << 47 30 47 32 22 3 " " 47 33 47 36 18446744073709551615 2 << 47 37 47 39 22 17 KLACULATE_VERSION 47 40 47 57 22 2 << 47 58 47 60 23 3 std 47 61 47 64 6 2 :: 47 64 47 66 24 4 endl 47 66 47 70 24 2 << 47 71 47 73 23 3 std 47 74 47 77 6 2 :: 47 77 47 79 25 5 flush 47 79 47 84 25 1 ; 47 84 47 85 18446744073709551615 25 // precache all templates 49 2 49 27 18446744073709551615 500 /* std::cout << "Precaching templates..." << std::flush;
	util::OutputHelper* oh = new util::OutputHelper();
	runFolder("", oh);
	std::cout << "\tAttempting preload..." << std::flush;
	std::string garbage = oh->getOutput();
	if (garbage.empty()) {
		std::cout << " \033[31mFAILED!\033[39m" << std::flush;
	}
	else {
		std::cout << " \033[32mSUCCESS!\033[39m" << std::flush;
		garbage.clear();
	}
	oh = nullptr;
	std::cout << std::endl << "Precache section finished." << std::endl << std::flush; // */ 50 2 63 90 18446744073709551615 6 struct 65 2 65 8 18446744073709551615 5 pidfh 65 9 65 14 26 1 * 65 15 65 16 18446744073709551615 3 pfh 65 16 65 19 27 1 = 65 20 65 21 18446744073709551615 4 NULL 65 22 65 26 27 1 ; 65 26 65 27 18446744073709551615 4 bool 66 2 66 6 18446744073709551615 10 set_daemon 66 7 66 17 28 1 = 66 18 66 19 18446744073709551615 4 true 66 20 66 24 18446744073709551615 1 ; 66 24 66 25 18446744073709551615 4 bool 67 2 67 6 18446744073709551615 7 set_pid 67 7 67 14 29 1 = 67 15 67 16 18446744073709551615 4 true 67 17 67 21 18446744073709551615 1 ; 67 21 67 22 18446744073709551615 4 bool 68 2 68 6 18446744073709551615 9 set_traps 68 7 68 16 30 1 = 68 17 68 18 18446744073709551615 4 true 68 19 68 23 18446744073709551615 1 ; 68 23 68 24 18446744073709551615 2 if 70 2 70 4 18446744073709551615 1 ( 70 5 70 6 18446744073709551615 4 argc 70 6 70 10 19 2 != 70 11 70 13 18446744073709551615 1 0 70 14 70 15 18446744073709551615 1 ) 70 15 70 16 18446744073709551615 1 { 70 17 70 18 18446744073709551615 3 for 71 3 71 6 18446744073709551615 1 ( 71 7 71 8 18446744073709551615 3 int 71 8 71 11 18446744073709551615 1 a 71 12 71 13 31 1 = 71 14 71 15 18446744073709551615 1 0 71 16 71 17 18446744073709551615 1 ; 71 17 71 18 18446744073709551615 1 a 71 19 71 20 31 1 < 71 21 71 22 18446744073709551615 4 argc 71 23 71 27 19 1 ; 71 27 71 28 18446744073709551615 1 a 71 29 71 30 31 2 ++ 71 30 71 32 18446744073709551615 1 ) 71 32 71 33 18446744073709551615 1 { 71 34 71 35 18446744073709551615 2 if 72 4 72 6 18446744073709551615 1 ( 72 7 72 8 18446744073709551615 4 argv 72 8 72 12 20 1 [ 72 12 72 13 18446744073709551615 1 a 72 13 72 14 31 1 ] 72 14 72 15 18446744073709551615 1 [ 72 15 72 16 18446744073709551615 1 0 72 16 72 17 18446744073709551615 1 ] 72 17 72 18 18446744073709551615 2 == 72 19 72 21 18446744073709551615 3 '-' 72 22 72 25 18446744073709551615 1 ) 72 25 72 26 18446744073709551615 1 { 72 27 72 28 18446744073709551615 3 int 73 5 73 8 18446744073709551615 1 b 73 9 73 10 32 1 = 73 11 73 12 18446744073709551615 6 strlen 73 13 73 19 33 1 ( 73 19 73 20 33 4 argv 73 20 73 24 20 1 [ 73 24 73 25 18446744073709551615 1 a 73 25 73 26 31 1 ] 73 26 73 27 18446744073709551615 1 ) 73 27 73 28 33 1 ; 73 28 73 29 18446744073709551615 3 for 74 5 74 8 18446744073709551615 1 ( 74 9 74 10 18446744073709551615 3 int 74 10 74 13 18446744073709551615 1 c 74 14 74 15 34 1 = 74 16 74 17 18446744073709551615 1 1 74 18 74 19 18446744073709551615 1 ; 74 19 74 20 18446744073709551615 1 c 74 21 74 22 34 1 < 74 23 74 24 18446744073709551615 1 b 74 25 74 26 32 1 ; 74 26 74 27 18446744073709551615 1 c 74 28 74 29 34 2 ++ 74 29 74 31 18446744073709551615 1 ) 74 31 74 32 18446744073709551615 1 { 74 33 74 34 18446744073709551615 6 switch 75 6 75 12 18446744073709551615 1 ( 75 13 75 14 18446744073709551615 4 argv 75 14 75 18 20 1 [ 75 18 75 19 18446744073709551615 1 a 75 19 75 20 31 1 ] 75 20 75 21 18446744073709551615 1 [ 75 21 75 22 18446744073709551615 1 c 75 22 75 23 34 1 ] 75 23 75 24 18446744073709551615 1 ) 75 24 75 25 18446744073709551615 1 { 75 26 75 27 18446744073709551615 4 case 76 7 76 11 18446744073709551615 3 'd' 76 12 76 15 18446744073709551615 1 : 76 15 76 16 18446744073709551615 10 set_daemon 76 17 76 27 28 1 = 76 28 76 29 18446744073709551615 5 false 76 30 76 35 18446744073709551615 1 ; 76 35 76 36 18446744073709551615 5 break 77 8 77 13 18446744073709551615 1 ; 77 13 77 14 18446744073709551615 4 case 78 7 78 11 18446744073709551615 3 'p' 78 12 78 15 18446744073709551615 1 : 78 15 78 16 18446744073709551615 7 set_pid 78 17 78 24 29 1 = 78 25 78 26 18446744073709551615 5 false 78 27 78 32 18446744073709551615 1 ; 78 32 78 33 18446744073709551615 5 break 79 8 79 13 18446744073709551615 1 ; 79 13 79 14 18446744073709551615 4 case 80 7 80 11 18446744073709551615 3 't' 80 12 80 15 18446744073709551615 1 : 80 15 80 16 18446744073709551615 9 set_traps 80 17 80 26 30 1 = 80 27 80 28 18446744073709551615 5 false 80 29 80 34 18446744073709551615 1 ; 80 34 80 35 18446744073709551615 5 break 81 8 81 13 18446744073709551615 1 ; 81 13 81 14 18446744073709551615 1 } 82 6 82 7 18446744073709551615 1 } 83 5 83 6 18446744073709551615 1 } 84 4 84 5 18446744073709551615 1 } 85 3 85 4 18446744073709551615 1 } 86 2 86 3 18446744073709551615 5 pid_t 87 2 87 7 35 8 otherpid 87 8 87 16 36 1 = 87 17 87 18 18446744073709551615 1 0 87 19 87 20 18446744073709551615 1 ; 87 20 87 21 18446744073709551615 2 if 89 2 89 4 18446744073709551615 1 ( 89 5 89 6 18446744073709551615 9 set_traps 89 6 89 15 30 1 ) 89 15 89 16 18446744073709551615 1 { 89 17 89 18 18446744073709551615 6 signal 90 3 90 9 37 1 ( 90 9 90 10 37 7 SIGABRT 90 10 90 17 37 1 , 90 17 90 18 37 1 & 90 19 90 20 18446744073709551615 7 control 90 20 90 27 3 1 ) 90 27 90 28 37 1 ; 90 28 90 29 18446744073709551615 6 signal 91 3 91 9 37 1 ( 91 9 91 10 37 7 SIGALRM 91 10 91 17 37 1 , 91 17 91 18 37 1 & 91 19 91 20 18446744073709551615 7 control 91 20 91 27 3 1 ) 91 27 91 28 37 1 ; 91 28 91 29 18446744073709551615 27 //signal(SIGILL, &control); 92 3 92 30 18446744073709551615 6 signal 93 3 93 9 37 1 ( 93 9 93 10 37 6 SIGFPE 93 10 93 16 37 1 , 93 16 93 17 37 1 & 93 18 93 19 18446744073709551615 7 control 93 19 93 26 3 1 ) 93 26 93 27 37 1 ; 93 27 93 28 18446744073709551615 6 signal 94 3 94 9 37 1 ( 94 9 94 10 37 6 SIGHUP 94 10 94 16 37 1 , 94 16 94 17 37 1 & 94 18 94 19 18446744073709551615 7 control 94 19 94 26 3 1 ) 94 26 94 27 37 1 ; 94 27 94 28 18446744073709551615 6 signal 95 3 95 9 37 1 ( 95 9 95 10 37 7 SIGINFO 95 10 95 17 37 1 , 95 17 95 18 37 1 & 95 19 95 20 18446744073709551615 7 control 95 20 95 27 3 1 ) 95 27 95 28 37 1 ; 95 28 95 29 18446744073709551615 6 signal 96 3 96 9 37 1 ( 96 9 96 10 37 6 SIGINT 96 10 96 16 37 1 , 96 16 96 17 37 1 & 96 18 96 19 18446744073709551615 7 control 96 19 96 26 3 1 ) 96 26 96 27 37 1 ; 96 27 96 28 18446744073709551615 6 signal 97 3 97 9 37 1 ( 97 9 97 10 37 7 SIGQUIT 97 10 97 17 37 1 , 97 17 97 18 37 1 & 97 19 97 20 18446744073709551615 7 control 97 20 97 27 3 1 ) 97 27 97 28 37 1 ; 97 28 97 29 18446744073709551615 6 signal 98 3 98 9 37 1 ( 98 9 98 10 37 7 SIGTERM 98 10 98 17 37 1 , 98 17 98 18 37 1 & 98 19 98 20 18446744073709551615 7 control 98 20 98 27 3 1 ) 98 27 98 28 37 1 ; 98 28 98 29 18446744073709551615 1 } 99 2 99 3 18446744073709551615 2 if 101 2 101 4 18446744073709551615 1 ( 101 5 101 6 18446744073709551615 7 set_pid 101 6 101 13 29 1 ) 101 13 101 14 18446744073709551615 1 { 101 15 101 16 18446744073709551615 3 pfh 102 3 102 6 27 1 = 102 7 102 8 18446744073709551615 12 pidfile_open 102 9 102 21 38 1 ( 102 21 102 22 38 19 "/var/run/klac.pid" 102 22 102 41 18446744073709551615 1 , 102 41 102 42 38 4 0600 102 43 102 47 18446744073709551615 1 , 102 47 102 48 38 1 & 102 49 102 50 18446744073709551615 8 otherpid 102 50 102 58 36 1 ) 102 58 102 59 38 1 ; 102 59 102 60 18446744073709551615 2 if 103 3 103 5 18446744073709551615 1 ( 103 6 103 7 18446744073709551615 3 pfh 103 7 103 10 27 2 == 103 11 103 13 18446744073709551615 4 NULL 103 14 103 18 18446744073709551615 1 ) 103 18 103 19 18446744073709551615 1 { 103 20 103 21 18446744073709551615 2 if 104 4 104 6 18446744073709551615 1 ( 104 7 104 8 18446744073709551615 5 errno 104 8 104 13 18446744073709551615 2 == 104 14 104 16 18446744073709551615 6 EEXIST 104 17 104 23 18446744073709551615 1 ) 104 23 104 24 18446744073709551615 1 { 104 25 104 26 18446744073709551615 3 std 105 5 105 8 6 2 :: 105 8 105 10 18446744073709551615 4 cerr 105 10 105 14 39 2 << 105 15 105 17 22 31 "Daemon already running, pid: " 105 18 105 49 18446744073709551615 2 << 105 50 105 52 22 3 std 105 53 105 56 6 2 :: 105 56 105 58 40 9 to_string 105 58 105 67 40 1 ( 105 67 105 68 40 8 otherpid 105 68 105 76 36 1 ) 105 76 105 77 40 2 << 105 78 105 80 23 3 std 105 81 105 84 6 2 :: 105 84 105 86 24 4 endl 105 86 105 90 24 1 ; 105 90 105 91 18446744073709551615 4 exit 106 5 106 9 41 1 ( 106 9 106 10 41 12 EXIT_FAILURE 106 10 106 22 41 1 ) 106 22 106 23 41 1 ; 106 23 106 24 18446744073709551615 1 } 107 4 107 5 18446744073709551615 3 std 108 4 108 7 6 2 :: 108 7 108 9 18446744073709551615 4 cerr 108 9 108 13 39 2 << 108 14 108 16 22 33 "Cannot open or create pidfile\n" 108 17 108 50 18446744073709551615 2 << 108 51 108 53 23 3 std 108 54 108 57 6 2 :: 108 57 108 59 24 4 endl 108 59 108 63 24 1 ; 108 63 108 64 18446744073709551615 1 } 109 3 109 4 18446744073709551615 1 } 110 2 110 3 18446744073709551615 2 if 112 2 112 4 18446744073709551615 1 ( 112 5 112 6 18446744073709551615 10 set_daemon 112 6 112 16 28 1 ) 112 16 112 17 18446744073709551615 1 { 112 18 112 19 18446744073709551615 2 if 113 3 113 5 18446744073709551615 1 ( 113 6 113 7 18446744073709551615 6 daemon 113 7 113 13 42 1 ( 113 13 113 14 42 1 0 113 14 113 15 18446744073709551615 1 , 113 15 113 16 42 1 0 113 17 113 18 18446744073709551615 1 ) 113 18 113 19 42 2 == 113 20 113 22 18446744073709551615 1 - 113 23 113 24 18446744073709551615 1 1 113 24 113 25 18446744073709551615 1 ) 113 25 113 26 18446744073709551615 1 { 113 27 113 28 18446744073709551615 3 std 114 4 114 7 6 2 :: 114 7 114 9 18446744073709551615 4 cerr 114 9 114 13 39 2 << 114 14 114 16 22 17 "daemon() fails." 114 17 114 34 18446744073709551615 2 << 114 35 114 37 23 3 std 114 38 114 41 6 2 :: 114 41 114 43 24 4 endl 114 43 114 47 24 1 ; 114 47 114 48 18446744073709551615 14 pidfile_remove 115 4 115 18 43 1 ( 115 18 115 19 43 3 pfh 115 19 115 22 27 1 ) 115 22 115 23 43 1 ; 115 23 115 24 18446744073709551615 4 exit 116 4 116 8 41 1 ( 116 8 116 9 41 12 EXIT_FAILURE 116 9 116 21 41 1 ) 116 21 116 22 41 1 ; 116 22 116 23 18446744073709551615 1 } 117 3 117 4 18446744073709551615 1 } 118 2 118 3 18446744073709551615 2 if 120 2 120 4 18446744073709551615 1 ( 120 5 120 6 18446744073709551615 7 set_pid 120 6 120 13 29 1 ) 120 13 120 14 18446744073709551615 1 { 120 15 120 16 18446744073709551615 13 pidfile_write 121 3 121 16 44 1 ( 121 16 121 17 44 3 pfh 121 17 121 20 27 1 ) 121 20 121 21 44 1 ; 121 21 121 22 18446744073709551615 1 } 122 2 122 3 18446744073709551615 3 int 124 2 124 5 18446744073709551615 6 fcgifd 124 6 124 12 45 1 = 124 13 124 14 18446744073709551615 15 FCGX_OpenSocket 124 15 124 30 46 1 ( 124 30 124 31 46 8 sockpath 124 31 124 39 0 1 , 124 39 124 40 46 3 128 124 41 124 44 18446744073709551615 1 ) 124 44 124 45 46 1 ; 124 45 124 46 18446744073709551615 5 chmod 126 2 126 7 47 1 ( 126 7 126 8 47 8 sockpath 126 8 126 16 0 1 , 126 16 126 17 47 4 0777 126 18 126 22 18446744073709551615 1 ) 126 22 126 23 47 1 ; 126 23 126 24 18446744073709551615 2 if 128 2 128 4 18446744073709551615 1 ( 128 5 128 6 18446744073709551615 1 0 128 6 128 7 18446744073709551615 1 > 128 8 128 9 18446744073709551615 6 fcgifd 128 10 128 16 45 1 ) 128 16 128 17 18446744073709551615 1 { 128 18 128 19 18446744073709551615 6 printf 129 3 129 9 48 1 ( 129 9 129 10 48 24 "Error opening socket\n" 129 10 129 34 18446744073709551615 1 ) 129 34 129 35 48 1 ; 129 35 129 36 18446744073709551615 4 exit 130 3 130 7 41 1 ( 130 7 130 8 41 1 1 130 8 130 9 18446744073709551615 1 ) 130 9 130 10 41 1 ; 130 10 130 11 18446744073709551615 1 } 131 2 131 3 18446744073709551615 103 /*
	if ( FCGX_IsCGI() ) {
		printf("Please run this process as FastCGI process.\n");
		exit(1);
	}
	 */ 133 2 138 5 18446744073709551615 6 struct 140 2 140 8 18446744073709551615 9 FCGI_Info 140 9 140 18 16 4 info 140 19 140 23 49 1 ; 140 23 140 24 18446744073709551615 4 info 141 2 141 6 49 1 . 141 6 141 7 18446744073709551615 7 fcgi_fd 141 7 141 14 17 1 = 141 15 141 16 18446744073709551615 6 fcgifd 141 17 141 23 45 1 ; 141 23 141 24 18446744073709551615 3 for 143 2 143 5 18446744073709551615 1 ( 143 6 143 7 18446744073709551615 8 unsigned 143 7 143 15 18446744073709551615 3 int 143 16 143 19 18446744073709551615 1 i 143 20 143 21 50 1 = 143 22 143 23 18446744073709551615 1 0 143 24 143 25 18446744073709551615 1 ; 143 25 143 26 18446744073709551615 1 i 143 27 143 28 50 1 < 143 29 143 30 18446744073709551615 9 n_threads 143 31 143 40 13 1 ; 143 40 143 41 18446744073709551615 1 i 143 42 143 43 50 2 ++ 143 43 143 45 18446744073709551615 1 ) 143 45 143 46 18446744073709551615 1 { 143 47 143 48 18446744073709551615 14 pthread_create 144 3 144 17 51 1 ( 144 17 144 18 51 1 & 144 18 144 19 18446744073709551615 7 threads 144 19 144 26 15 1 [ 144 26 144 27 18446744073709551615 1 i 144 27 144 28 50 1 ] 144 28 144 29 18446744073709551615 1 , 144 29 144 30 51 4 NULL 144 31 144 35 51 1 , 144 35 144 36 51 17 start_fcgi_worker 144 37 144 54 1 1 , 144 54 144 55 51 1 ( 144 56 144 57 18446744073709551615 4 void 144 57 144 61 18446744073709551615 1 * 144 61 144 62 18446744073709551615 1 ) 144 62 144 63 18446744073709551615 1 & 144 64 144 65 18446744073709551615 4 info 144 65 144 69 49 1 ) 144 69 144 70 51 1 ; 144 70 144 71 18446744073709551615 1 } 145 2 145 3 18446744073709551615 20 // Wait indefinitely 147 2 147 22 18446744073709551615 3 int 148 2 148 5 18446744073709551615 3 max 148 6 148 9 52 1 = 148 10 148 11 18446744073709551615 9 n_threads 148 12 148 21 13 1 + 148 22 148 23 18446744073709551615 1 1 148 24 148 25 18446744073709551615 1 ; 148 25 148 26 18446744073709551615 3 for 149 2 149 5 18446744073709551615 1 ( 149 6 149 7 18446744073709551615 8 unsigned 149 7 149 15 18446744073709551615 3 int 149 16 149 19 18446744073709551615 1 i 149 20 149 21 53 1 = 149 22 149 23 18446744073709551615 1 0 149 24 149 25 18446744073709551615 1 ; 149 25 149 26 18446744073709551615 1 i 149 27 149 28 53 1 < 149 29 149 30 18446744073709551615 3 max 149 31 149 34 52 1 ; 149 34 149 35 18446744073709551615 1 i 149 36 149 37 53 2 ++ 149 37 149 39 18446744073709551615 1 ) 149 39 149 40 18446744073709551615 1 { 149 41 149 42 18446744073709551615 12 pthread_join 150 3 150 15 54 1 ( 150 15 150 16 54 7 threads 150 16 150 23 15 1 [ 150 23 150 24 18446744073709551615 1 i 150 24 150 25 53 1 ] 150 25 150 26 18446744073709551615 1 , 150 26 150 27 54 4 NULL 150 28 150 32 54 1 ) 150 32 150 33 54 1 ; 150 33 150 34 18446744073709551615 2 if 151 3 151 5 18446744073709551615 1 ( 151 6 151 7 18446744073709551615 11 stopService 151 7 151 18 12 1 ) 151 18 151 19 18446744073709551615 1 { 151 20 151 21 18446744073709551615 5 break 152 4 152 9 18446744073709551615 1 ; 152 9 152 10 18446744073709551615 1 } 153 3 153 4 18446744073709551615 1 } 154 2 154 3 18446744073709551615 2 if 156 2 156 4 18446744073709551615 1 ( 156 5 156 6 18446744073709551615 7 set_pid 156 6 156 13 29 1 ) 156 13 156 14 18446744073709551615 1 { 156 15 156 16 18446744073709551615 14 pidfile_remove 157 3 157 17 43 1 ( 157 17 157 18 43 3 pfh 157 18 157 21 27 1 ) 157 21 157 22 43 1 ; 157 22 157 23 18446744073709551615 1 } 158 2 158 3 18446744073709551615 6 remove 159 2 159 8 55 1 ( 159 8 159 9 55 21 "/tmp/klaculate.sock" 159 9 159 30 18446744073709551615 1 ) 159 30 159 31 55 1 ; 159 31 159 32 18446744073709551615 6 return 161 2 161 8 18446744073709551615 1 0 161 9 161 10 18446744073709551615 1 ; 161 10 161 11 18446744073709551615 1 } 162 1 162 2 18446744073709551615 4 void 164 1 164 5 18446744073709551615 1 * 164 5 164 6 1 17 start_fcgi_worker 164 7 164 24 1 1 ( 164 24 164 25 1 4 void 164 25 164 29 18446744073709551615 1 * 164 29 164 30 18446744073709551615 3 arg 164 31 164 34 56 1 ) 164 34 164 35 1 1 { 164 36 164 37 18446744073709551615 6 struct 165 2 165 8 18446744073709551615 9 FCGI_Info 165 9 165 18 16 1 * 165 18 165 19 18446744073709551615 4 info 165 20 165 24 57 1 = 165 25 165 26 18446744073709551615 1 ( 165 27 165 28 18446744073709551615 6 struct 165 28 165 34 18446744073709551615 9 FCGI_Info 165 35 165 44 16 1 * 165 44 165 45 18446744073709551615 1 ) 165 45 165 46 18446744073709551615 3 arg 165 47 165 50 56 1 ; 165 50 165 51 18446744073709551615 9 FCGX_Init 167 2 167 11 58 1 ( 167 11 167 12 58 1 ) 167 12 167 13 58 1 ; 167 13 167 14 18446744073709551615 12 FCGX_Request 169 2 169 14 59 7 request 169 15 169 22 60 1 ; 169 22 169 23 18446744073709551615 16 FCGX_InitRequest 171 2 171 18 61 1 ( 171 18 171 19 61 1 & 171 19 171 20 18446744073709551615 7 request 171 20 171 27 60 1 , 171 27 171 28 61 4 info 171 29 171 33 57 2 -> 171 33 171 35 18446744073709551615 7 fcgi_fd 171 35 171 42 17 1 , 171 42 171 43 61 1 0 171 44 171 45 18446744073709551615 1 ) 171 45 171 46 61 1 ; 171 46 171 47 18446744073709551615 21 pthread_setcanceltype 172 2 172 23 62 1 ( 172 23 172 24 62 27 PTHREAD_CANCEL_ASYNCHRONOUS 172 24 172 51 62 1 , 172 51 172 52 62 4 NULL 172 53 172 57 62 1 ) 172 57 172 58 62 1 ; 172 58 172 59 18446744073709551615 5 while 173 2 173 7 18446744073709551615 1 ( 173 8 173 9 18446744073709551615 1 ! 173 9 173 10 18446744073709551615 11 stopService 173 10 173 21 12 1 ) 173 21 173 22 18446744073709551615 1 { 173 23 173 24 18446744073709551615 22 pthread_setcancelstate 174 3 174 25 63 1 ( 174 25 174 26 63 21 PTHREAD_CANCEL_ENABLE 174 26 174 47 63 1 , 174 47 174 48 63 4 NULL 174 49 174 53 63 1 ) 174 53 174 54 63 1 ; 174 54 174 55 18446744073709551615 13 FCGX_Accept_r 175 3 175 16 64 1 ( 175 16 175 17 64 1 & 175 17 175 18 18446744073709551615 7 request 175 18 175 25 60 1 ) 175 25 175 26 64 1 ; 175 26 175 27 18446744073709551615 22 pthread_setcancelstate 176 3 176 25 63 1 ( 176 25 176 26 63 22 PTHREAD_CANCEL_DISABLE 176 26 176 48 63 1 , 176 48 176 49 63 4 NULL 176 50 176 54 63 1 ) 176 54 176 55 63 1 ; 176 55 176 56 18446744073709551615 7 runtask 178 3 178 10 65 1 ( 178 10 178 11 65 1 & 178 11 178 12 18446744073709551615 7 request 178 12 178 19 60 1 ) 178 19 178 20 65 1 ; 178 20 178 21 18446744073709551615 13 FCGX_Finish_r 180 3 180 16 66 1 ( 180 16 180 17 66 1 & 180 17 180 18 18446744073709551615 7 request 180 18 180 25 60 1 ) 180 25 180 26 66 1 ; 180 26 180 27 18446744073709551615 1 } 181 2 181 3 18446744073709551615 6 return 182 2 182 8 18446744073709551615 1 0 182 9 182 10 18446744073709551615 1 ; 182 10 182 11 18446744073709551615 1 } 183 1 183 2 18446744073709551615 6 static 185 1 185 7 18446744073709551615 4 void 185 8 185 12 18446744073709551615 7 control 185 13 185 20 3 1 ( 185 20 185 21 3 3 int 185 21 185 24 18446744073709551615 3 sig 185 25 185 28 67 1 ) 185 28 185 29 3 1 { 185 30 185 31 18446744073709551615 6 static 186 2 186 8 18446744073709551615 5 const 186 9 186 14 18446744073709551615 4 char 186 15 186 19 18446744073709551615 1 * 186 20 186 21 18446744073709551615 6 labels 186 21 186 27 68 1 [ 186 27 186 28 18446744073709551615 1 ] 186 28 186 29 18446744073709551615 1 = 186 30 186 31 18446744073709551615 1 { 186 32 186 33 18446744073709551615 3 "-" 187 3 187 6 18446744073709551615 1 , 187 6 187 7 18446744073709551615 8 "SIGHUP" 187 8 187 16 18446744073709551615 1 , 187 16 187 17 18446744073709551615 8 "SIGINT" 187 18 187 26 18446744073709551615 1 , 187 26 187 27 18446744073709551615 9 "SIGQUIT" 187 28 187 37 18446744073709551615 1 , 187 37 187 38 18446744073709551615 8 "SIGILL" 187 39 187 47 18446744073709551615 1 , 187 47 187 48 18446744073709551615 9 "SIGTRAP" 187 49 187 58 18446744073709551615 1 , 187 58 187 59 18446744073709551615 9 "SIGABRT" 187 60 187 69 18446744073709551615 1 , 187 69 187 70 18446744073709551615 8 "SIGEMT" 187 71 187 79 18446744073709551615 1 , 187 79 187 80 18446744073709551615 8 "SIGFPE" 187 81 187 89 18446744073709551615 1 , 187 89 187 90 18446744073709551615 9 "SIGKILL" 187 91 187 100 18446744073709551615 1 , 187 100 187 101 18446744073709551615 8 "SIGBUS" 187 102 187 110 18446744073709551615 1 , 187 110 187 111 18446744073709551615 9 "SIGSEGV" 187 112 187 121 18446744073709551615 1 , 187 121 187 122 18446744073709551615 8 "SIGSYS" 187 123 187 131 18446744073709551615 1 , 187 131 187 132 18446744073709551615 9 "SIGPIPE" 187 133 187 142 18446744073709551615 1 , 187 142 187 143 18446744073709551615 9 "SIGALRM" 187 144 187 153 18446744073709551615 1 , 187 153 187 154 18446744073709551615 9 "SIGTERM" 187 155 187 164 18446744073709551615 1 } 188 2 188 3 18446744073709551615 1 ; 188 3 188 4 18446744073709551615 2 if 189 2 189 4 18446744073709551615 1 ( 189 5 189 6 18446744073709551615 3 sig 189 6 189 9 67 1 > 189 10 189 11 18446744073709551615 1 0 189 12 189 13 18446744073709551615 2 && 189 14 189 16 18446744073709551615 3 sig 189 17 189 20 67 1 < 189 21 189 22 18446744073709551615 1 ( 189 23 189 24 18446744073709551615 3 int 189 24 189 27 18446744073709551615 1 ) 189 27 189 28 18446744073709551615 8 _countof 189 29 189 37 18446744073709551615 1 ( 189 37 189 38 18446744073709551615 6 labels 189 38 189 44 18446744073709551615 1 ) 189 44 189 45 18446744073709551615 1 ) 189 45 189 46 18446744073709551615 7 fprintf 190 3 190 10 69 1 ( 190 10 190 11 69 6 stderr 190 11 190 17 69 1 , 190 17 190 18 69 16 "Captured %s.\n" 190 19 190 35 18446744073709551615 1 , 190 35 190 36 69 6 labels 190 37 190 43 68 1 [ 190 43 190 44 18446744073709551615 3 sig 190 44 190 47 67 1 ] 190 47 190 48 18446744073709551615 1 ) 190 48 190 49 69 1 ; 190 49 190 50 18446744073709551615 4 else 191 2 191 6 18446744073709551615 7 fprintf 192 3 192 10 69 1 ( 192 10 192 11 69 6 stderr 192 11 192 17 69 1 , 192 17 192 18 69 30 "Something bad %d happened.\n" 192 19 192 49 18446744073709551615 1 , 192 49 192 50 69 3 sig 192 51 192 54 67 1 ) 192 54 192 55 69 1 ; 192 55 192 56 18446744073709551615 2 if 194 2 194 4 18446744073709551615 1 ( 194 5 194 6 18446744073709551615 3 sig 194 6 194 9 67 2 == 194 10 194 12 18446744073709551615 6 SIGINT 194 13 194 19 18446744073709551615 2 || 194 20 194 22 18446744073709551615 3 sig 194 23 194 26 67 2 == 194 27 194 29 18446744073709551615 7 SIGQUIT 194 30 194 37 18446744073709551615 2 || 194 38 194 40 18446744073709551615 3 sig 194 41 194 44 67 2 == 194 45 194 47 18446744073709551615 7 SIGTERM 194 48 194 55 18446744073709551615 1 ) 194 55 194 56 18446744073709551615 1 { 194 57 194 58 18446744073709551615 20 FCGX_ShutdownPending 195 3 195 23 70 1 ( 195 23 195 24 70 1 ) 195 24 195 25 70 1 ; 195 25 195 26 18446744073709551615 11 stopService 196 3 196 14 12 1 = 196 15 196 16 18446744073709551615 4 true 196 17 196 21 18446744073709551615 1 ; 196 21 196 22 18446744073709551615 3 for 197 3 197 6 18446744073709551615 1 ( 197 7 197 8 18446744073709551615 8 unsigned 197 8 197 16 18446744073709551615 3 int 197 17 197 20 18446744073709551615 1 a 197 21 197 22 71 1 = 197 23 197 24 18446744073709551615 1 0 197 25 197 26 18446744073709551615 1 ; 197 26 197 27 18446744073709551615 1 a 197 28 197 29 71 1 < 197 30 197 31 18446744073709551615 9 n_threads 197 32 197 41 13 1 ; 197 41 197 42 18446744073709551615 1 a 197 43 197 44 71 2 ++ 197 44 197 46 18446744073709551615 1 ) 197 46 197 47 18446744073709551615 1 { 197 48 197 49 18446744073709551615 14 pthread_cancel 198 4 198 18 72 1 ( 198 18 198 19 72 7 threads 198 19 198 26 15 1 [ 198 26 198 27 18446744073709551615 1 a 198 27 198 28 71 1 ] 198 28 198 29 18446744073709551615 1 ) 198 29 198 30 72 1 ; 198 30 198 31 18446744073709551615 1 } 199 3 199 4 18446744073709551615 1 } 200 2 200 3 18446744073709551615 1 } 201 1 201 2 18446744073709551615 4 void 203 1 203 5 18446744073709551615 9 runFolder 203 6 203 15 5 1 ( 203 15 203 16 5 3 std 203 16 203 19 6 2 :: 203 19 203 21 18446744073709551615 6 string 203 21 203 27 7 6 folder 203 28 203 34 73 1 , 203 34 203 35 5 4 util 203 36 203 40 9 2 :: 203 40 203 42 18446744073709551615 12 OutputHelper 203 42 203 54 10 1 * 203 55 203 56 18446744073709551615 2 oh 203 57 203 59 74 1 ) 203 59 203 60 5 1 { 203 61 203 62 18446744073709551615 3 DIR 204 2 204 5 75 1 * 204 5 204 6 18446744073709551615 3 dir 204 7 204 10 76 1 ; 204 10 204 11 18446744073709551615 6 struct 205 2 205 8 18446744073709551615 6 dirent 205 9 205 15 77 1 * 205 15 205 16 18446744073709551615 3 ent 205 17 205 20 78 1 ; 205 20 205 21 18446744073709551615 3 std 206 2 206 5 6 2 :: 206 5 206 7 18446744073709551615 6 string 206 7 206 13 7 5 fname 206 14 206 19 79 1 ( 206 19 206 20 80 32 "/usr/home/klaculate/templates/" 206 20 206 52 18446744073709551615 1 ) 206 52 206 53 80 1 ; 206 53 206 54 18446744073709551615 5 fname 207 2 207 7 79 1 . 207 7 207 8 81 6 append 207 8 207 14 81 1 ( 207 14 207 15 81 6 folder 207 15 207 21 73 1 ) 207 21 207 22 81 1 ; 207 22 207 23 18446744073709551615 2 if 209 2 209 4 18446744073709551615 1 ( 209 5 209 6 18446744073709551615 1 ( 209 6 209 7 18446744073709551615 3 dir 209 7 209 10 76 1 = 209 11 209 12 18446744073709551615 7 opendir 209 13 209 20 82 1 ( 209 20 209 21 82 5 fname 209 21 209 26 79 1 . 209 26 209 27 83 5 c_str 209 27 209 32 83 1 ( 209 32 209 33 83 1 ) 209 33 209 34 83 1 ) 209 34 209 35 82 1 ) 209 35 209 36 18446744073709551615 2 != 209 37 209 39 18446744073709551615 4 NULL 209 40 209 44 18446744073709551615 1 ) 209 44 209 45 18446744073709551615 1 { 209 46 209 47 18446744073709551615 5 while 210 3 210 8 18446744073709551615 1 ( 210 9 210 10 18446744073709551615 1 ( 210 10 210 11 18446744073709551615 3 ent 210 11 210 14 78 1 = 210 15 210 16 18446744073709551615 7 readdir 210 17 210 24 84 1 ( 210 24 210 25 84 3 dir 210 25 210 28 76 1 ) 210 28 210 29 84 1 ) 210 29 210 30 18446744073709551615 2 != 210 31 210 33 18446744073709551615 4 NULL 210 34 210 38 18446744073709551615 1 ) 210 38 210 39 18446744073709551615 1 { 210 40 210 41 18446744073709551615 2 if 211 4 211 6 18446744073709551615 1 ( 211 7 211 8 18446744073709551615 3 ent 211 8 211 11 78 2 -> 211 11 211 13 18446744073709551615 6 d_name 211 13 211 19 85 1 [ 211 19 211 20 18446744073709551615 1 0 211 20 211 21 18446744073709551615 1 ] 211 21 211 22 18446744073709551615 2 != 211 23 211 25 18446744073709551615 3 '.' 211 26 211 29 18446744073709551615 1 ) 211 29 211 30 18446744073709551615 1 { 211 31 211 32 18446744073709551615 3 std 212 5 212 8 6 2 :: 212 8 212 10 18446744073709551615 6 string 212 10 212 16 7 8 partname 212 17 212 25 86 1 ( 212 25 212 26 80 6 folder 212 26 212 32 73 1 ) 212 32 212 33 80 1 ; 212 33 212 34 18446744073709551615 2 if 213 5 213 7 18446744073709551615 1 ( 213 8 213 9 18446744073709551615 1 ! 213 9 213 10 18446744073709551615 6 folder 213 10 213 16 73 1 . 213 16 213 17 87 5 empty 213 17 213 22 87 1 ( 213 22 213 23 87 1 ) 213 23 213 24 87 1 ) 213 24 213 25 18446744073709551615 1 { 213 26 213 27 18446744073709551615 8 partname 214 6 214 14 86 1 . 214 14 214 15 81 6 append 214 15 214 21 81 1 ( 214 21 214 22 81 3 "/" 214 22 214 25 18446744073709551615 1 ) 214 25 214 26 81 1 ; 214 26 214 27 18446744073709551615 1 } 215 5 215 6 18446744073709551615 8 partname 216 5 216 13 86 1 . 216 13 216 14 81 6 append 216 14 216 20 81 1 ( 216 20 216 21 81 3 ent 216 21 216 24 78 2 -> 216 24 216 26 18446744073709551615 6 d_name 216 26 216 32 85 1 ) 216 32 216 33 81 1 ; 216 33 216 34 18446744073709551615 3 std 218 5 218 8 6 2 :: 218 8 218 10 18446744073709551615 6 string 218 10 218 16 7 8 fullname 218 17 218 25 88 1 ( 218 25 218 26 80 5 fname 218 26 218 31 79 1 ) 218 31 218 32 80 1 ; 218 32 218 33 18446744073709551615 2 if 219 5 219 7 18446744073709551615 1 ( 219 8 219 9 18446744073709551615 1 ! 219 9 219 10 18446744073709551615 6 folder 219 10 219 16 73 1 . 219 16 219 17 87 5 empty 219 17 219 22 87 1 ( 219 22 219 23 87 1 ) 219 23 219 24 87 1 ) 219 24 219 25 18446744073709551615 1 { 219 26 219 27 18446744073709551615 8 fullname 220 6 220 14 88 1 . 220 14 220 15 81 6 append 220 15 220 21 81 1 ( 220 21 220 22 81 3 "/" 220 22 220 25 18446744073709551615 1 ) 220 25 220 26 81 1 ; 220 26 220 27 18446744073709551615 1 } 221 5 221 6 18446744073709551615 8 fullname 222 5 222 13 88 1 . 222 13 222 14 81 6 append 222 14 222 20 81 1 ( 222 20 222 21 81 3 ent 222 21 222 24 78 2 -> 222 24 222 26 18446744073709551615 6 d_name 222 26 222 32 85 1 ) 222 32 222 33 81 1 ; 222 33 222 34 18446744073709551615 6 struct 223 5 223 11 18446744073709551615 4 stat 223 12 223 16 89 2 fs 223 17 223 19 90 1 ; 223 19 223 20 18446744073709551615 3 int 224 5 224 8 18446744073709551615 6 result 224 9 224 15 91 1 = 224 16 224 17 18446744073709551615 4 stat 224 18 224 22 92 1 ( 224 22 224 23 92 8 fullname 224 23 224 31 88 1 . 224 31 224 32 83 5 c_str 224 32 224 37 83 1 ( 224 37 224 38 83 1 ) 224 38 224 39 83 1 , 224 39 224 40 92 1 & 224 41 224 42 18446744073709551615 2 fs 224 42 224 44 90 1 ) 224 44 224 45 92 1 ; 224 45 224 46 18446744073709551615 2 if 225 5 225 7 18446744073709551615 1 ( 225 8 225 9 18446744073709551615 6 result 225 9 225 15 91 2 == 225 16 225 18 18446744073709551615 1 0 225 19 225 20 18446744073709551615 1 ) 225 20 225 21 18446744073709551615 1 { 225 22 225 23 18446744073709551615 2 if 226 6 226 8 18446744073709551615 1 ( 226 9 226 10 18446744073709551615 7 S_ISDIR 226 10 226 17 18446744073709551615 1 ( 226 17 226 18 18446744073709551615 2 fs 226 18 226 20 18446744073709551615 1 . 226 20 226 21 18446744073709551615 7 st_mode 226 21 226 28 18446744073709551615 1 ) 226 28 226 29 18446744073709551615 1 ) 226 29 226 30 18446744073709551615 1 { 226 31 226 32 18446744073709551615 9 runFolder 227 7 227 16 5 1 ( 227 16 227 17 5 8 partname 227 17 227 25 86 1 , 227 25 227 26 5 2 oh 227 27 227 29 74 1 ) 227 29 227 30 5 1 ; 227 30 227 31 18446744073709551615 1 } 228 6 228 7 18446744073709551615 4 else 229 6 229 10 18446744073709551615 2 if 229 11 229 13 18446744073709551615 1 ( 229 14 229 15 18446744073709551615 7 S_ISREG 229 15 229 22 18446744073709551615 1 ( 229 22 229 23 18446744073709551615 2 fs 229 23 229 25 18446744073709551615 1 . 229 25 229 26 18446744073709551615 7 st_mode 229 26 229 33 18446744073709551615 1 ) 229 33 229 34 18446744073709551615 1 ) 229 34 229 35 18446744073709551615 1 { 229 36 229 37 18446744073709551615 2 oh 230 7 230 9 74 2 -> 230 9 230 11 93 11 addTemplate 230 11 230 22 93 1 ( 230 22 230 23 93 8 partname 230 23 230 31 86 1 ) 230 31 230 32 93 1 ; 230 32 230 33 18446744073709551615 1 } 231 6 231 7 18446744073709551615 1 } 232 5 232 6 18446744073709551615 1 } 233 4 233 5 18446744073709551615 1 } 234 3 234 4 18446744073709551615 8 closedir 235 3 235 11 94 1 ( 235 11 235 12 94 3 dir 235 12 235 15 76 1 ) 235 15 235 16 94 1 ; 235 16 235 17 18446744073709551615 1 } 236 2 236 3 18446744073709551615 4 free 237 2 237 6 95 1 ( 237 6 237 7 95 3 dir 237 7 237 10 76 1 ) 237 10 237 11 95 1 ; 237 11 237 12 18446744073709551615 4 free 238 2 238 6 95 1 ( 238 6 238 7 95 3 ent 238 7 238 10 78 1 ) 238 10 238 11 95 1 ; 238 11 238 12 18446744073709551615 1 } 239 1 239 2 18446744073709551615 0 0 96 0 0 0 9 0 0 1 2 0 8 sockpath 8 1 2 0 17 start_fcgi_worker 10 1 2 0 58 33:31:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 7 control 10 1 2 0 58 34:25:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 9 runFolder 22 1 2 0 3 std 20 1 2 0 14 string:__1:std 10 1 2 0 58 35:28:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 22 1 2 0 4 util 4 1 2 0 17 OutputHelper:util 10 1 2 0 58 35:56:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 11 stopService 9 1 2 0 9 n_threads 20 1 2 0 9 pthread_t 9 1 2 0 7 threads 2 1 2 0 9 FCGI_Info 6 1 2 0 17 fcgi_fd:FCGI_Info 8 1 2 0 4 main 10 1 2 0 58 46:14:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 10 1 2 0 58 46:27:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 8 1 2 0 13 flush:__1:std 2 1 2 0 5 pidfh 9 1 2 0 58 65:16:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 57 66:7:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 57 67:7:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 57 68:7:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 58 71:12:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 57 73:9:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 6 strlen 9 1 2 0 58 74:14:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 20 1 2 0 5 pid_t 9 1 2 0 57 87:8:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 6 signal 8 1 2 0 12 pidfile_open 9 1 2 0 12 cerr:__1:std 8 1 2 0 17 to_string:__1:std 8 1 2 0 4 exit 8 1 2 0 6 daemon 8 1 2 0 14 pidfile_remove 8 1 2 0 13 pidfile_write 9 1 2 0 58 124:6:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 15 FCGX_OpenSocket 8 1 2 0 5 chmod 8 1 2 0 6 printf 9 1 2 0 59 140:19:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 59 143:20:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 14 pthread_create 9 1 2 0 58 148:6:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 59 149:20:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 12 pthread_join 8 1 2 0 6 remove 10 1 2 0 59 164:31:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 59 165:20:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 9 FCGX_Init 20 1 2 0 12 FCGX_Request 9 1 2 0 59 169:15:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 16 FCGX_InitRequest 8 1 2 0 21 pthread_setcanceltype 8 1 2 0 22 pthread_setcancelstate 8 1 2 0 13 FCGX_Accept_r 8 1 2 0 7 runtask 8 1 2 0 13 FCGX_Finish_r 10 1 2 0 59 185:25:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 59 186:21:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 7 fprintf 8 1 2 0 20 FCGX_ShutdownPending 9 1 2 0 59 197:21:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 14 pthread_cancel 10 1 2 0 59 203:28:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 10 1 2 0 59 203:57:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 20 1 2 0 3 DIR 9 1 2 0 58 204:7:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 2 1 2 0 6 dirent 9 1 2 0 59 205:17:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 59 206:14:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 24 1 2 0 20 basic_string:__1:std 21 1 2 0 27 append:basic_string:__1:std 8 1 2 0 7 opendir 21 1 2 0 26 c_str:basic_string:__1:std 8 1 2 0 7 readdir 6 1 2 0 13 d_name:dirent 9 1 2 0 59 212:17:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 21 1 2 0 26 empty:basic_string:__1:std 9 1 2 0 59 218:17:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 2 1 2 0 4 stat 9 1 2 0 59 223:17:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 9 1 2 0 58 224:9:/usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 8 1 2 0 4 stat 21 1 2 0 29 addTemplate:OutputHelper:util 8 1 2 0 8 closedir 8 1 2 0 4 free 0 0 5 0 0 0 50 /usr/home/jlhawkwell/Projects/klaculate/src/klac.h 1629610405 55 /usr/home/jlhawkwell/Projects/klaculate/src/klaculate.h 1629620449 52 /usr/home/jlhawkwell/Projects/klaculate/src/main.cpp 1629618718 62 /usr/home/jlhawkwell/Projects/klaculate/src/util/InputHelper.h 1629612523 63 /usr/home/jlhawkwell/Projects/klaculate/src/util/OutputHelper.h 1629618856